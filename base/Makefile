#
# Makefile generated by fpcmake v0.99.13 on 1999-12-21 16:56
#

defaultrule: info

#####################################################################
# Autodetect OS (Linux or D





# Targets

override DIROBJECTS+=$(wildcard compiler rtl utils packages fcl ide)

# Clean


# Install

ZIPTARGET=install

# Defaults


# Directories

ifndef PACKAGEDIR
PACKAGEDIR=$(FPCDIR)/packages
endif
ifndef COMPONENTDIR
COMPONENTDIR=$(FPCDIR)/components
endif

# Packages


# Libraries


# Post Settings

export RELEASE=1













all: $(addsuffix _all,$(DIROBJECTS))

debug: $(addsuffix _debug,$(DIROBJECTS))

examples: $(addsuffix _examples,$(DIROBJECTS))

test: $(addsuffix _test,$(DIROBJECTS))

smart: $(addsuffix _smart,$(DIROBJECTS))

shared: $(addsuffix _shared,$(DIROBJECTS))

showinstall: $(addsuffix _showinstall,$(DIROBJECTS))

install: $(addsuffix _install,$(DIROBJECTS))

sourceinstall: $(addsuffix _sourceinstall,$(DIROBJECTS))

clean: $(addsuffix _clean,$(DIROBJECTS))

cleanall: $(addsuffix _cleanall,$(DIROBJECTS))

depend: $(addsuffix _depend,$(DIROBJECTS))

.PHONY:  all debug examples test smart shared showinstall install sourceinstall clean cleanall depend


ifneq ($(wildcard $(RTLDIR)),)
ifeq ($(wildcard $(RTLDIR)/$(FPCMADE)),)
override COMPILEPACKAGES+=rtl
rtl_package:
	$(MAKE) -C $(RTLDIR) all
endif
endif

.PHONY:  rtl_package


# Target Dirs

OBJECTDIRCOMPILER=1
OBJECTDIRRTL=1
OBJECTDIRUTILS=1
OBJECTDIRPACKAGES=1
OBJECTDIRFCL=1
OBJECTDIRIDE=1

# Dir compiler

ifdef OBJECTDIRCOMPILER
.PHONY:  compiler_all compiler_debug compiler_examples compiler_test compiler_smart compiler_shared compiler_showinstall compiler_install compiler_sourceinstall compiler_zipinstall compiler_zipinstalladd compiler_clean compiler_cleanall compiler_depend compiler_info

compiler_all:
	$(MAKE) -C compiler all

compiler_debug:
	$(MAKE) -C compiler debug

compiler_examples:
	$(MAKE) -C compiler examples

compiler_test:
	$(MAKE) -C compiler test

compiler_smart:
	$(MAKE) -C compiler smart

compiler_shared:
	$(MAKE) -C compiler shared

compiler_showinstall:
	$(MAKE) -C compiler showinstall

compiler_install:
	$(MAKE) -C compiler install

compiler_sourceinstall:
	$(MAKE) -C compiler sourceinstall

compiler_zipinstall:
	$(MAKE) -C compiler zipinstall

compiler_zipinstalladd:
	$(MAKE) -C compiler zipinstalladd

compiler_clean:
	$(MAKE) -C compiler clean

compiler_cleanall:
	$(MAKE) -C compiler cleanall

compiler_depend:
	$(MAKE) -C compiler depend

compiler_info:
	$(MAKE) -C compiler info
endif

# Dir rtl

ifdef OBJECTDIRRTL
.PHONY:  rtl_all rtl_debug rtl_examples rtl_test rtl_smart rtl_shared rtl_showinstall rtl_install rtl_sourceinstall rtl_zipinstall rtl_zipinstalladd rtl_clean rtl_cleanall rtl_depend rtl_info

rtl_all:
	$(MAKE) -C rtl all

rtl_debug:
	$(MAKE) -C rtl debug

rtl_examples:
	$(MAKE) -C rtl examples

rtl_test:
	$(MAKE) -C rtl test

rtl_smart:
	$(MAKE) -C rtl smart

rtl_shared:
	$(MAKE) -C rtl shared

rtl_showinstall:
	$(MAKE) -C rtl showinstall

rtl_install:
	$(MAKE) -C rtl install

rtl_sourceinstall:
	$(MAKE) -C rtl sourceinstall

rtl_zipinstall:
	$(MAKE) -C rtl zipinstall

rtl_zipinstalladd:
	$(MAKE) -C rtl zipinstalladd

rtl_clean:
	$(MAKE) -C rtl clean

rtl_cleanall:
	$(MAKE) -C rtl cleanall

rtl_depend:
	$(MAKE) -C rtl depend

rtl_info:
	$(MAKE) -C rtl info
endif

# Dir utils

ifdef OBJECTDIRUTILS
.PHONY:  utils_all utils_debug utils_examples utils_test utils_smart utils_shared utils_showinstall utils_install utils_sourceinstall utils_zipinstall utils_zipinstalladd utils_clean utils_cleanall utils_depend utils_info

utils_all:
	$(MAKE) -C utils all

utils_debug:
	$(MAKE) -C utils debug

utils_examples:
	$(MAKE) -C utils examples

utils_test:
	$(MAKE) -C utils test

utils_smart:
	$(MAKE) -C utils smart

utils_shared:
	$(MAKE) -C utils shared

utils_showinstall:
	$(MAKE) -C utils showinstall

utils_install:
	$(MAKE) -C utils install

utils_sourceinstall:
	$(MAKE) -C utils sourceinstall

utils_zipinstall:
	$(MAKE) -C utils zipinstall

utils_zipinstalladd:
	$(MAKE) -C utils zipinstalladd

utils_clean:
	$(MAKE) -C utils clean

utils_cleanall:
	$(MAKE) -C utils cleanall

utils_depend:
	$(MAKE) -C utils depend

utils_info:
	$(MAKE) -C utils info
endif

# Dir packages

ifdef OBJECTDIRPACKAGES
.PHONY:  packages_all packages_debug packages_examples packages_test packages_smart packages_shared packages_showinstall packages_install packages_sourceinstall packages_zipinstall packages_zipinstalladd packages_clean packages_cleanall packages_depend packages_info

packages_all:
	$(MAKE) -C packages all

packages_debug:
	$(MAKE) -C packages debug

packages_examples:
	$(MAKE) -C packages examples

packages_test:
	$(MAKE) -C packages test

packages_smart:
	$(MAKE) -C packages smart

packages_shared:
	$(MAKE) -C packages shared

packages_showinstall:
	$(MAKE) -C packages showinstall

packages_install:
	$(MAKE) -C packages install

packages_sourceinstall:
	$(MAKE) -C packages sourceinstall

packages_zipinstall:
	$(MAKE) -C packages zipinstall

packages_zipinstalladd:
	$(MAKE) -C packages zipinstalladd

packages_clean:
	$(MAKE) -C packages clean

packages_cleanall:
	$(MAKE) -C packages cleanall

packages_depend:
	$(MAKE) -C packages depend

packages_info:
	$(MAKE) -C packages info
endif

# Dir fcl

ifdef OBJECTDIRFCL
.PHONY:  fcl_all fcl_debug fcl_examples fcl_test fcl_smart fcl_shared fcl_showinstall fcl_install fcl_sourceinstall fcl_zipinstall fcl_zipinstalladd fcl_clean fcl_cleanall fcl_depend fcl_info

fcl_all:
	$(MAKE) -C fcl all

fcl_debug:
	$(MAKE) -C fcl debug

fcl_examples:
	$(MAKE) -C fcl examples

fcl_test:
	$(MAKE) -C fcl test

fcl_smart:
	$(MAKE) -C fcl smart

fcl_shared:
	$(MAKE) -C fcl shared

fcl_showinstall:
	$(MAKE) -C fcl showinstall

fcl_install:
	$(MAKE) -C fcl install

fcl_sourceinstall:
	$(MAKE) -C fcl sourceinstall

fcl_zipinstall:
	$(MAKE) -C fcl zipinstall

fcl_zipinstalladd:
	$(MAKE) -C fcl zipinstalladd

fcl_clean:
	$(MAKE) -C fcl clean

fcl_cleanall:
	$(MAKE) -C fcl cleanall

fcl_depend:
	$(MAKE) -C fcl depend

fcl_info:
	$(MAKE) -C fcl info
endif

# Dir ide

ifdef OBJECTDIRIDE
.PHONY:  ide_all ide_debug ide_examples ide_test ide_smart ide_shared ide_showinstall ide_install ide_sourceinstall ide_zipinstall ide_zipinstalladd ide_clean ide_cleanall ide_depend ide_info

ide_all:
	$(MAKE) -C ide all

ide_debug:
	$(MAKE) -C ide debug

ide_examples:
	$(MAKE) -C ide examples

ide_test:
	$(MAKE) -C ide test

ide_smart:
	$(MAKE) -C ide smart

ide_shared:
	$(MAKE) -C ide shared

ide_showinstall:
	$(MAKE) -C ide showinstall

ide_install:
	$(MAKE) -C ide install

ide_sourceinstall:
	$(MAKE) -C ide sourceinstall

ide_zipinstall:
	$(MAKE) -C ide zipinstall

ide_zipinstalladd:
	$(MAKE) -C ide zipinstalladd

ide_clean:
	$(MAKE) -C ide clean

ide_cleanall:
	$(MAKE) -C ide cleanall

ide_depend:
	$(MAKE) -C ide depend

ide_info:
	$(MAKE) -C ide info
endif


#####################################################################
# Main targets
#####################################################################

.PHONY: compiler_cycle \
	idezips ide_allzip ide_gdbzip ide_fullzip ide_fullgdbzip \
	fclzip gtkzip fvzip compilerzip utilszip

info:
	@echo
	@echo Please use one of the following targets:
	@echo
	@echo $(DIROBJECTS)
	@echo
	@echo All targets can follow after a _ with:
	@echo all,clean,install,staticinstall,sharedinstall
	@echo
	@echo example: make api_staticinstall
	@exit

#####################################################################
# Dependencies
#####################################################################

#######################################
# Compiler
#######################################

compiler_cycle:
	$(MAKE) -C compiler cycle

#######################################
# IDE
#######################################

ide_gdb:
	$(MAKE) -C ide gdb

ide_full:
	$(MAKE) -C ide full

ide_fullgdb:
	$(MAKE) -C ide fullgdb


#######################################
# Install targets
#######################################

base_install:
	$(INSTALL) base/Makefile $(BASEINSTALLDIR)
	$(INSTALL) base/makefile.fpc $(BASEINSTALLDIR)

demo_install:
	$(MAKE) -C demo installdemo

man_install:
	$(MAKE) -C man installman


#######################################
# Packaging targets
#######################################

export DESTZIPDIR:=$(BASEDIR)

idezips: clean ide_allzip ide_gdbzip ide_fullzip ide_fullgdbzip

ide_allzip:
	$(MAKE) ide_clean
	$(MAKE) ide_all
	$(MAKE) -C ide/text zipinstall ZIPNAME=ide-fake-$(PACKAGESUFFIX)
ide_gdbzip:
	$(MAKE) ide_clean
	$(MAKE) ide_gdb
	$(MAKE) -C ide/text zipinstall ZIPNAME=ide-gdb-$(PACKAGESUFFIX)
ide_fullzip:
	$(MAKE) compiler_clean
	$(MAKE) ide_clean
	$(MAKE) ide_full
	$(MAKE) -C ide/text zipinstall ZIPNAME=ide-comp-$(PACKAGESUFFIX)
ide_fullgdbzip:
	$(MAKE) ide_clean
	$(MAKE) ide_fullgdb
	$(MAKE) -C ide/text zipinstall ZIPNAME=ide-full-$(PACKAGESUFFIX)

fvzip: rtl_clean
	$(MAKE) -C packages api_clean
	$(MAKE) -C packages fv_clean
	$(MAKE) -C packages fv_all
	$(MAKE) -C packages api_zipinstall ZIPNAME=fv-$(PACKAGESUFFIX)
	$(MAKE) -C packages fv_zipinstalladd ZIPNAME=fv-$(PACKAGESUFFIX)

gtkzip: rtl_clean
	$(MAKE) -C packages gtk_clean
	$(MAKE) -C packages gtk_all
	$(MAKE) -C packages gtk_zipinstall ZIPNAME=gtk-$(PACKAGESUFFIX)

compilerzip: compiler_clean rtl_clean
	$(MAKE) rtl_all
	$(MAKE) compiler_all
	$(MAKE) compiler_zipinstall ZIPTARGET=quickinstall ZIPNAME=compiler-$(PACKAGESUFFIX)
	$(MAKE) rtl_zipinstalladd ZIPNAME=compiler-$(PACKAGESUFFIX)

fclzip: rtl_clean fcl_clean
	$(MAKE) fcl_all
	$(MAKE) fcl_zipinstall ZIPNAME=fcl-$(PACKAGESUFFIX)

utilszip: utils_clean rtl_clean fcl_clean
	$(MAKE) utils_all
	$(MAKE) utils_zipinstall ZIPNAME=utils-$(PACKAGESUFFIX)
