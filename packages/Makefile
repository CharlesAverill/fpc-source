#
# Makefile generated by fpcmake v0.99.13 on 1999-11-24 22:14
#

defaultrule: all

#####################################################################
# Autodetect OS (Linux or Dos or Windows NT)
# define inlinux when running under linux
# define inWinNT when running under WinNT
#####################################################################

# We need only / in the path
override PATH:=$(subst \,/,$(PATH))

# Search for PWD and determine also if we are under linux
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(subst ;, ,$(PATH)))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(subst :, ,$(PATH)))))
ifeq ($(PWD),)
nopwd:
	@echo You need the GNU utils package to use this Makefile!
	@echo Get ftp://ftp.freepascal.org/pub/fpc/dist/go32v2/utilgo32.zip
	@exit
else
inlinux=1
endif
else
PWD:=$(firstword $(PWD))
endif

# Detect NT - NT sets OS to Windows_NT
ifndef inlinux
ifeq ($(OS),Windows_NT)
inWinNT=1
endif
endif

# Detect OS/2 - OS/2 has OS2_SHELL defined
ifndef inlinux
ifndef inWinNT
ifdef OS2_SHELL
inOS2=1
endif
endif
endif

# The extension of executables
ifdef inlinux
EXEEXT=
else
EXEEXT=.exe
endif

# The path which is search separated by spaces
ifdef inlinux
SEARCHPATH=$(subst :, ,$(PATH))
else
SEARCHPATH=$(subst ;, ,$(PATH))
endif

#####################################################################
# FPC version/target Detection
#####################################################################

# What compiler to use ?
ifndef FPC
ifdef inOS2
export FPC=ppos2$(EXEEXT)
else
export FPC=ppc386$(EXEEXT)
endif
endif

# Target OS
ifndef OS_TARGET
export OS_TARGET:=$(shell $(FPC) -iTO)
endif

# Source OS
ifndef OS_SOURCE
export OS_SOURCE:=$(shell $(FPC) -iSO)
endif

# Target CPU
ifndef CPU_TARGET
export CPU_TARGET:=$(shell $(FPC) -iTP)
endif

# Source CPU
ifndef CPU_SOURCE
export CPU_SOURCE:=$(shell $(FPC) -iSP)
endif

# FPC version
ifndef FPC_VERSION
export FPC_VERSION:=$(shell $(FPC) -iV)
endif

#####################################################################
# Default Settings
#####################################################################

# Release ? Then force OPT and don't use extra opts via commandline
ifdef RELEASE
override OPT:=-Xs -OG2p3 -n
endif

# Verbose settings (warning,note,info)
ifdef VERBOSE
override OPT+=-vwni
endif

#####################################################################
# User Settings
#####################################################################


# Targets

DIROBJECTS+=$(wildcard ibase mysql uncgi paszlib gdbint api fv)
ifeq ($(OS_TARGET),linux)
DIROBJECTS+=$(wildcard gtk opengl utmp inet postgres ncurses forms svgalib ggi)
endif
ifeq ($(OS_TARGET),win32)
DIROBJECTS+=$(wildcard gtk opengl)
endif

# Clean


# Install


# Defaults


# Directories

ifndef PACKAGEDIR
PACKAGEDIR=$(FPCDIR)/packages
endif

# Packages


# Libraries


#####################################################################
# Default rules
#####################################################################

.PHONY: defaultrule all debug examples smart shared \
	showinstall install zipinstall zipinstalladd \
	clean cleanall depend info

all: $(addsuffix _all,$(DIROBJECTS))

debug: $(addsuffix _debug,$(DIROBJECTS))

examples: $(addsuffix _examples,$(DIROBJECTS))

smart: $(addsuffix _smart,$(DIROBJECTS))

shared: $(addsuffix _shared,$(DIROBJECTS))

showinstall: $(addsuffix _showinstall,$(DIROBJECTS))

install: $(addsuffix _install,$(DIROBJECTS))

zipinstall: $(addsuffix _zipinstall,$(DIROBJECTS))

zipinstalladd: $(addsuffix _zipinstalladd,$(DIROBJECTS))

clean: $(addsuffix _clean,$(DIROBJECTS))

cleanall: $(addsuffix _cleanall,$(DIROBJECTS))

depend: $(addsuffix _depend,$(DIROBJECTS))

info: $(addsuffix _info,$(DIROBJECTS))


# Dir ibase

ibase_all:
	$(MAKE) -C ibase all

ibase_debug:
	$(MAKE) -C ibase debug

ibase_examples:
	$(MAKE) -C ibase examples

ibase_smart:
	$(MAKE) -C ibase smart

ibase_shared:
	$(MAKE) -C ibase shared

ibase_showinstall:
	$(MAKE) -C ibase showinstall

ibase_install:
	$(MAKE) -C ibase install

ibase_zipinstall:
	$(MAKE) -C ibase zipinstall

ibase_zipinstalladd:
	$(MAKE) -C ibase zipinstalladd

ibase_clean:
	$(MAKE) -C ibase clean

ibase_cleanall:
	$(MAKE) -C ibase cleanall

ibase_depend:
	$(MAKE) -C ibase depend

ibase_info:
	$(MAKE) -C ibase info


# Dir mysql

mysql_all:
	$(MAKE) -C mysql all

mysql_debug:
	$(MAKE) -C mysql debug

mysql_examples:
	$(MAKE) -C mysql examples

mysql_smart:
	$(MAKE) -C mysql smart

mysql_shared:
	$(MAKE) -C mysql shared

mysql_showinstall:
	$(MAKE) -C mysql showinstall

mysql_install:
	$(MAKE) -C mysql install

mysql_zipinstall:
	$(MAKE) -C mysql zipinstall

mysql_zipinstalladd:
	$(MAKE) -C mysql zipinstalladd

mysql_clean:
	$(MAKE) -C mysql clean

mysql_cleanall:
	$(MAKE) -C mysql cleanall

mysql_depend:
	$(MAKE) -C mysql depend

mysql_info:
	$(MAKE) -C mysql info


# Dir uncgi

uncgi_all:
	$(MAKE) -C uncgi all

uncgi_debug:
	$(MAKE) -C uncgi debug

uncgi_examples:
	$(MAKE) -C uncgi examples

uncgi_smart:
	$(MAKE) -C uncgi smart

uncgi_shared:
	$(MAKE) -C uncgi shared

uncgi_showinstall:
	$(MAKE) -C uncgi showinstall

uncgi_install:
	$(MAKE) -C uncgi install

uncgi_zipinstall:
	$(MAKE) -C uncgi zipinstall

uncgi_zipinstalladd:
	$(MAKE) -C uncgi zipinstalladd

uncgi_clean:
	$(MAKE) -C uncgi clean

uncgi_cleanall:
	$(MAKE) -C uncgi cleanall

uncgi_depend:
	$(MAKE) -C uncgi depend

uncgi_info:
	$(MAKE) -C uncgi info


# Dir paszlib

paszlib_all:
	$(MAKE) -C paszlib all

paszlib_debug:
	$(MAKE) -C paszlib debug

paszlib_examples:
	$(MAKE) -C paszlib examples

paszlib_smart:
	$(MAKE) -C paszlib smart

paszlib_shared:
	$(MAKE) -C paszlib shared

paszlib_showinstall:
	$(MAKE) -C paszlib showinstall

paszlib_install:
	$(MAKE) -C paszlib install

paszlib_zipinstall:
	$(MAKE) -C paszlib zipinstall

paszlib_zipinstalladd:
	$(MAKE) -C paszlib zipinstalladd

paszlib_clean:
	$(MAKE) -C paszlib clean

paszlib_cleanall:
	$(MAKE) -C paszlib cleanall

paszlib_depend:
	$(MAKE) -C paszlib depend

paszlib_info:
	$(MAKE) -C paszlib info


# Dir gdbint

gdbint_all:
	$(MAKE) -C gdbint all

gdbint_debug:
	$(MAKE) -C gdbint debug

gdbint_examples:
	$(MAKE) -C gdbint examples

gdbint_smart:
	$(MAKE) -C gdbint smart

gdbint_shared:
	$(MAKE) -C gdbint shared

gdbint_showinstall:
	$(MAKE) -C gdbint showinstall

gdbint_install:
	$(MAKE) -C gdbint install

gdbint_zipinstall:
	$(MAKE) -C gdbint zipinstall

gdbint_zipinstalladd:
	$(MAKE) -C gdbint zipinstalladd

gdbint_clean:
	$(MAKE) -C gdbint clean

gdbint_cleanall:
	$(MAKE) -C gdbint cleanall

gdbint_depend:
	$(MAKE) -C gdbint depend

gdbint_info:
	$(MAKE) -C gdbint info


# Dir api

api_all:
	$(MAKE) -C api all

api_debug:
	$(MAKE) -C api debug

api_examples:
	$(MAKE) -C api examples

api_smart:
	$(MAKE) -C api smart

api_shared:
	$(MAKE) -C api shared

api_showinstall:
	$(MAKE) -C api showinstall

api_install:
	$(MAKE) -C api install

api_zipinstall:
	$(MAKE) -C api zipinstall

api_zipinstalladd:
	$(MAKE) -C api zipinstalladd

api_clean:
	$(MAKE) -C api clean

api_cleanall:
	$(MAKE) -C api cleanall

api_depend:
	$(MAKE) -C api depend

api_info:
	$(MAKE) -C api info


# Dir fv

fv_all:
	$(MAKE) -C fv all

fv_debug:
	$(MAKE) -C fv debug

fv_examples:
	$(MAKE) -C fv examples

fv_smart:
	$(MAKE) -C fv smart

fv_shared:
	$(MAKE) -C fv shared

fv_showinstall:
	$(MAKE) -C fv showinstall

fv_install:
	$(MAKE) -C fv install

fv_zipinstall:
	$(MAKE) -C fv zipinstall

fv_zipinstalladd:
	$(MAKE) -C fv zipinstalladd

fv_clean:
	$(MAKE) -C fv clean

fv_cleanall:
	$(MAKE) -C fv cleanall

fv_depend:
	$(MAKE) -C fv depend

fv_info:
	$(MAKE) -C fv info

ifeq ($(OS_TARGET),linux)

# Dir gtk

gtk_all:
	$(MAKE) -C gtk all

gtk_debug:
	$(MAKE) -C gtk debug

gtk_examples:
	$(MAKE) -C gtk examples

gtk_smart:
	$(MAKE) -C gtk smart

gtk_shared:
	$(MAKE) -C gtk shared

gtk_showinstall:
	$(MAKE) -C gtk showinstall

gtk_install:
	$(MAKE) -C gtk install

gtk_zipinstall:
	$(MAKE) -C gtk zipinstall

gtk_zipinstalladd:
	$(MAKE) -C gtk zipinstalladd

gtk_clean:
	$(MAKE) -C gtk clean

gtk_cleanall:
	$(MAKE) -C gtk cleanall

gtk_depend:
	$(MAKE) -C gtk depend

gtk_info:
	$(MAKE) -C gtk info


# Dir opengl

opengl_all:
	$(MAKE) -C opengl all

opengl_debug:
	$(MAKE) -C opengl debug

opengl_examples:
	$(MAKE) -C opengl examples

opengl_smart:
	$(MAKE) -C opengl smart

opengl_shared:
	$(MAKE) -C opengl shared

opengl_showinstall:
	$(MAKE) -C opengl showinstall

opengl_install:
	$(MAKE) -C opengl install

opengl_zipinstall:
	$(MAKE) -C opengl zipinstall

opengl_zipinstalladd:
	$(MAKE) -C opengl zipinstalladd

opengl_clean:
	$(MAKE) -C opengl clean

opengl_cleanall:
	$(MAKE) -C opengl cleanall

opengl_depend:
	$(MAKE) -C opengl depend

opengl_info:
	$(MAKE) -C opengl info


# Dir utmp

utmp_all:
	$(MAKE) -C utmp all

utmp_debug:
	$(MAKE) -C utmp debug

utmp_examples:
	$(MAKE) -C utmp examples

utmp_smart:
	$(MAKE) -C utmp smart

utmp_shared:
	$(MAKE) -C utmp shared

utmp_showinstall:
	$(MAKE) -C utmp showinstall

utmp_install:
	$(MAKE) -C utmp install

utmp_zipinstall:
	$(MAKE) -C utmp zipinstall

utmp_zipinstalladd:
	$(MAKE) -C utmp zipinstalladd

utmp_clean:
	$(MAKE) -C utmp clean

utmp_cleanall:
	$(MAKE) -C utmp cleanall

utmp_depend:
	$(MAKE) -C utmp depend

utmp_info:
	$(MAKE) -C utmp info


# Dir inet

inet_all:
	$(MAKE) -C inet all

inet_debug:
	$(MAKE) -C inet debug

inet_examples:
	$(MAKE) -C inet examples

inet_smart:
	$(MAKE) -C inet smart

inet_shared:
	$(MAKE) -C inet shared

inet_showinstall:
	$(MAKE) -C inet showinstall

inet_install:
	$(MAKE) -C inet install

inet_zipinstall:
	$(MAKE) -C inet zipinstall

inet_zipinstalladd:
	$(MAKE) -C inet zipinstalladd

inet_clean:
	$(MAKE) -C inet clean

inet_cleanall:
	$(MAKE) -C inet cleanall

inet_depend:
	$(MAKE) -C inet depend

inet_info:
	$(MAKE) -C inet info


# Dir postgres

postgres_all:
	$(MAKE) -C postgres all

postgres_debug:
	$(MAKE) -C postgres debug

postgres_examples:
	$(MAKE) -C postgres examples

postgres_smart:
	$(MAKE) -C postgres smart

postgres_shared:
	$(MAKE) -C postgres shared

postgres_showinstall:
	$(MAKE) -C postgres showinstall

postgres_install:
	$(MAKE) -C postgres install

postgres_zipinstall:
	$(MAKE) -C postgres zipinstall

postgres_zipinstalladd:
	$(MAKE) -C postgres zipinstalladd

postgres_clean:
	$(MAKE) -C postgres clean

postgres_cleanall:
	$(MAKE) -C postgres cleanall

postgres_depend:
	$(MAKE) -C postgres depend

postgres_info:
	$(MAKE) -C postgres info


# Dir ncurses

ncurses_all:
	$(MAKE) -C ncurses all

ncurses_debug:
	$(MAKE) -C ncurses debug

ncurses_examples:
	$(MAKE) -C ncurses examples

ncurses_smart:
	$(MAKE) -C ncurses smart

ncurses_shared:
	$(MAKE) -C ncurses shared

ncurses_showinstall:
	$(MAKE) -C ncurses showinstall

ncurses_install:
	$(MAKE) -C ncurses install

ncurses_zipinstall:
	$(MAKE) -C ncurses zipinstall

ncurses_zipinstalladd:
	$(MAKE) -C ncurses zipinstalladd

ncurses_clean:
	$(MAKE) -C ncurses clean

ncurses_cleanall:
	$(MAKE) -C ncurses cleanall

ncurses_depend:
	$(MAKE) -C ncurses depend

ncurses_info:
	$(MAKE) -C ncurses info


# Dir forms

forms_all:
	$(MAKE) -C forms all

forms_debug:
	$(MAKE) -C forms debug

forms_examples:
	$(MAKE) -C forms examples

forms_smart:
	$(MAKE) -C forms smart

forms_shared:
	$(MAKE) -C forms shared

forms_showinstall:
	$(MAKE) -C forms showinstall

forms_install:
	$(MAKE) -C forms install

forms_zipinstall:
	$(MAKE) -C forms zipinstall

forms_zipinstalladd:
	$(MAKE) -C forms zipinstalladd

forms_clean:
	$(MAKE) -C forms clean

forms_cleanall:
	$(MAKE) -C forms cleanall

forms_depend:
	$(MAKE) -C forms depend

forms_info:
	$(MAKE) -C forms info


# Dir svgalib

svgalib_all:
	$(MAKE) -C svgalib all

svgalib_debug:
	$(MAKE) -C svgalib debug

svgalib_examples:
	$(MAKE) -C svgalib examples

svgalib_smart:
	$(MAKE) -C svgalib smart

svgalib_shared:
	$(MAKE) -C svgalib shared

svgalib_showinstall:
	$(MAKE) -C svgalib showinstall

svgalib_install:
	$(MAKE) -C svgalib install

svgalib_zipinstall:
	$(MAKE) -C svgalib zipinstall

svgalib_zipinstalladd:
	$(MAKE) -C svgalib zipinstalladd

svgalib_clean:
	$(MAKE) -C svgalib clean

svgalib_cleanall:
	$(MAKE) -C svgalib cleanall

svgalib_depend:
	$(MAKE) -C svgalib depend

svgalib_info:
	$(MAKE) -C svgalib info


# Dir ggi

ggi_all:
	$(MAKE) -C ggi all

ggi_debug:
	$(MAKE) -C ggi debug

ggi_examples:
	$(MAKE) -C ggi examples

ggi_smart:
	$(MAKE) -C ggi smart

ggi_shared:
	$(MAKE) -C ggi shared

ggi_showinstall:
	$(MAKE) -C ggi showinstall

ggi_install:
	$(MAKE) -C ggi install

ggi_zipinstall:
	$(MAKE) -C ggi zipinstall

ggi_zipinstalladd:
	$(MAKE) -C ggi zipinstalladd

ggi_clean:
	$(MAKE) -C ggi clean

ggi_cleanall:
	$(MAKE) -C ggi cleanall

ggi_depend:
	$(MAKE) -C ggi depend

ggi_info:
	$(MAKE) -C ggi info

endif
ifeq ($(OS_TARGET),win32)

# Dir gtk

gtk_all:
	$(MAKE) -C gtk all

gtk_debug:
	$(MAKE) -C gtk debug

gtk_examples:
	$(MAKE) -C gtk examples

gtk_smart:
	$(MAKE) -C gtk smart

gtk_shared:
	$(MAKE) -C gtk shared

gtk_showinstall:
	$(MAKE) -C gtk showinstall

gtk_install:
	$(MAKE) -C gtk install

gtk_zipinstall:
	$(MAKE) -C gtk zipinstall

gtk_zipinstalladd:
	$(MAKE) -C gtk zipinstalladd

gtk_clean:
	$(MAKE) -C gtk clean

gtk_cleanall:
	$(MAKE) -C gtk cleanall

gtk_depend:
	$(MAKE) -C gtk depend

gtk_info:
	$(MAKE) -C gtk info


# Dir opengl

opengl_all:
	$(MAKE) -C opengl all

opengl_debug:
	$(MAKE) -C opengl debug

opengl_examples:
	$(MAKE) -C opengl examples

opengl_smart:
	$(MAKE) -C opengl smart

opengl_shared:
	$(MAKE) -C opengl shared

opengl_showinstall:
	$(MAKE) -C opengl showinstall

opengl_install:
	$(MAKE) -C opengl install

opengl_zipinstall:
	$(MAKE) -C opengl zipinstall

opengl_zipinstalladd:
	$(MAKE) -C opengl zipinstalladd

opengl_clean:
	$(MAKE) -C opengl clean

opengl_cleanall:
	$(MAKE) -C opengl cleanall

opengl_depend:
	$(MAKE) -C opengl depend

opengl_info:
	$(MAKE) -C opengl info

endif
