#
# Don't edit, this file is generated by fpcmake v1.99.0 [2001/02/01]
#
default: all
override PATH:=$(subst \,/,$(PATH))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(subst ;, ,$(PATH)))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(subst :, ,$(PATH)))))
ifeq ($(PWD),)
nopwd:
	@echo You need the GNU utils package to use this Makefile!
	@echo Get ftp://ftp.freepascal.org/pub/fpc/dist/go32v2/utilgo32.zip
	@exit
else
inUnix=1
PWD:=$(firstword $(PWD))
endif
else
PWD:=$(firstword $(PWD))
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
endif
ifdef inUnix
SRCEXEEXT=
else
SRCEXEEXT=.exe
endif
ifdef inUnix
BATCHEXT=.sh
else
ifdef inOS2
BATCHEXT=.cmd
else
BATCHEXT=.bat
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP=$(subst /,\,/)
endif
ifdef inUnix
SEARCHPATH=$(subst :, ,$(PATH))
else
SEARCHPATH=$(subst ;, ,$(PATH))
endif
ifdef PWD
BASEDIR:=$(shell $(PWD))
else
BASEDIR=.
endif
ifndef FPC
ifdef PP
FPC=$(PP)
else
FPC=ppc386
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
ifndef OS_TARGET
OS_TARGET:=$(shell $(FPC) -iTO)
endif
ifndef OS_SOURCE
OS_SOURCE:=$(shell $(FPC) -iSO)
endif
ifndef CPU_TARGET
CPU_TARGET:=$(shell $(FPC) -iTP)
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(shell $(FPC) -iSP)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(shell $(FPC) -iV)
endif
export FPC OS_TARGET OS_SOURCE CPU_TARGET CPU_SOURCE FPC_VERSION
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(FPCDIR)/rtl),)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=wrong
endif
endif
else
override FPCDIR=wrong
endif
ifeq ($(FPCDIR),wrong)
override FPCDIR=..
ifeq ($(wildcard $(FPCDIR)/rtl),)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(FPCDIR)/rtl),)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(FPCDIR)/rtl),)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
endif
override FPCDIR:=$(wildcard $(FPCDIR))
UNITSDIR=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
PACKAGESDIR=$(wildcard $(FPCDIR) $(FPCDIR)/packages)
ifeq ($(OS_TARGET),linux)
override TARGET_DIRS+=zlib ncurses x11 gtk syslog inet uncgi mysql ibase postgres oracle opengl forms svgalib ggi utmp paszlib gdbint cmem regexpr unzip
endif
ifeq ($(OS_TARGET),go32v2)
override TARGET_DIRS+=uncgi gdbint paszlib unzip regexpr
endif
ifeq ($(OS_TARGET),win32)
override TARGET_DIRS+=uncgi gtk gdbint ibase mysql zlib paszlib unzip regexpr opengl
endif
ifeq ($(OS_TARGET),os2)
override TARGET_DIRS+=uncgi paszlib unzip regexpr
endif
ifeq ($(OS_TARGET),freebsd)
override TARGET_DIRS+=zlib ncurses x11 gtk syslog inet uncgi mysql ibase postgres opengl forms svgalib ggi utmp paszlib gdbint cmem regexpr unzip
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(EXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
ifndef COPY
COPY:=cp -fp
endif
ifndef COPYTREE
COPYTREE:=cp -rfp
endif
ifndef MOVE
MOVE:=mv -f
endif
ifndef DEL
DEL:=rm -f
endif
ifndef DELTREE
DELTREE:=rm -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=install -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=install -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
ifdef inUnix
MKDIR:=install -m 755 -d
else
MKDIR:=ginstall -m 755 -d
endif
endif
export ECHO COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef AS
AS=as
endif
ifndef LD
LD=ld
endif
PPAS=$(BATCHEXT)
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE=
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef PPUFILES
PPUFILES:=$(strip $(wildcard $(addsuffix /ppufiles$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUFILES),)
PPUFILES=
else
PPUFILES:=$(firstword $(PPUFILES))
endif
endif
export PPUFILES
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEACHPATH))))
ifeq ($(DATE),)
DATE=
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ifndef UPXPROG
ifeq ($(OS_TARGET),go32v2)
UPXPROG:=1
endif
ifeq ($(OS_TARGET),win32)
UPXPROG:=1
endif
ifdef UPXPROG
UPXPROG:=$(strip $(wildcard $(addsuffix /upx$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(UPXPROG),)
UPXPROG=
else
UPXPROG:=$(firstword $(UPXPROG))
endif
else
UPXPROG=
endif
endif
export UPXPROG
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG=
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ZIPOPT=-9
ZIPEXT=.zip
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG=
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ifeq ($(USETAR),bz2)
TAROPT=vI
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
LIBPREFIX=lib
RSTEXT=.rst
FPCMADE=fpcmade
ifeq ($(OS_TARGET),go32v1)
PPUEXT=.pp1
OEXT=.o1
ASMEXT=.s1
SMARTEXT=.sl1
STATICLIBEXT=.a1
SHAREDLIBEXT=.so1
LIBPREFIX=
FPCMADE=fpcmade.v1
PACKAGESUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
LIBPREFIX=
FPCMADE=fpcmade.dos
ZIPSUFFIX=go32
endif
ifeq ($(OS_TARGET),linux)
EXEEXT=
HASSHAREDLIB=1
FPCMADE=fpcmade.lnx
ZIPSUFFIX=linux
endif
ifeq ($(OS_TARGET),freebsd)
EXEEXT=
HASSHAREDLIB=1
FPCMADE=fpcmade.freebsd
ZIPSUFFIX=freebsd
endif
ifeq ($(OS_TARGET),win32)
PPUEXT=.ppw
OEXT=.ow
ASMEXT=.sw
SMARTEXT=.slw
STATICLIBEXT=.aw
SHAREDLIBEXT=.dll
FPCMADE=fpcmade.w32
ZIPSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
PPUEXT=.ppo
ASMEXT=.so2
OEXT=.oo2
SMARTEXT=.so
STATICLIBEXT=.ao2
SHAREDLIBEXT=.dll
FPCMADE=fpcmade.os2
ZIPSUFFIX=emx
endif
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifeq ($(OS_TARGET),linux)
UNIXINSTALLDIR=1
endif
ifeq ($(OS_TARGET),freebsd)
UNIXINSTALLDIR=1
endif
else
ifeq ($(OS_SOURCE),linux)
UNIXINSTALLDIR=1
endif
ifeq ($(OS_SOURCE),freebsd)
UNIXINSTALLDIR=1
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXINSTALLDIR
INSTALL_PREFIX=/usr/local
else
INSTALL_PREFIX=/pp
endif
endif
export INSTALL_PREFIX
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef INSTALL_BASEDIR
ifdef UNIXINSTALLDIR
INSTALL_BASEDIR=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXINSTALLDIR
INSTALL_BINDIR=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR=$(INSTALL_BASEDIR)/bin/$(OS_TARGET)
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR=$(INSTALL_BASEDIR)/units/$(OS_TARGET)
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXINSTALLDIR
INSTALL_LIBDIR=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXINSTALLDIR
INSTALL_SOURCEDIR=$(INSTALL_PREFIX)/src/fpc-$(FPC_VERSION)
else
INSTALL_SOURCEDIR=$(INSTALL_BASEDIR)/source
endif
ifdef PACKAGE_NAME
INSTALL_SOURCEDIR:=$(INSTALL_SOURCEDIR)/$(PACKAGE_NAME)
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXINSTALLDIR
INSTALL_DOCDIR=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)
else
INSTALL_DOCDIR=$(INSTALL_BASEDIR)/doc
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXINSTALLDIR
INSTALL_EXAMPLEDIR=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR=$(INSTALL_BASEDIR)/examples
endif
ifdef EXAMPLESUBDIR
INSTALL_EXAMPLEDIR:=$(INSTALL_EXAMPLEDIR)/$(EXAMPLESUBDIR)
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
override FPCOPTDEF=$(CPU_TARGET)
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
override FPCOPT+=-Xs -OG2p3 -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-OG2p3
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifeq ($(OS_SOURCE),win32)
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override COMPILER:=$(FPC) $(FPCOPT)
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(OS_SOURCE),$(OS_TARGET))
EXECPPAS:=@$(PPAS)
endif
endif
.PHONY: fpc_packages fpc_all fpc_smart fpc_debug
$(FPCMADE): $(ALLTARGET)
	@$(ECHO) Compiled > $(FPCMADE)
fpc_packages: $(COMPILEPACKAGES)
fpc_all: fpc_packages $(FPCMADE)
fpc_smart:
	$(MAKE) all LINKSMART=1 CREATESMART=1
fpc_debug:
	$(MAKE) all DEBUG=1
.SUFFIXES: $(EXEEXT) $(PPUEXT) $(OEXT) .pas .pp
%$(PPUEXT): %.pp
	$(COMPILER) $<
	$(EXECPPAS)
%$(PPUEXT): %.pas
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.pp
	$(COMPILER) $<
	$(EXECPPAS)
%$(EXEEXT): %.pas
	$(COMPILER) $<
	$(EXECPPAS)
vpath %.pp $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.pas $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %$(PPUEXT) $(COMPILER_UNITTARGETDIR)
.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall
ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif
ifdef INSTALLPPUFILES
ifdef PPUFILES
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(INSTALLPPUFILES))
override INSTALLPPULINKFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(shell $(PPUFILES) -S -O $(INSTALLPPUFILES)))
else
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(LIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(INSTALLPPUFILES))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(INSTALLPPULINKFILES)))
endif
endif
ifdef INSTALLEXEFILES
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(INSTALLEXEFILES))
endif
fpc_install: $(INSTALLTARGET)
ifdef INSTALLEXEFILES
	$(MKDIR) $(INSTALL_BINDIR)
ifdef UPXPROG
	-$(UPXPROG) $(INSTALLEXEFILES)
endif
	$(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALLPPUFILES
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
	$(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
	$(MKDIR) $(INSTALL_LIBDIR)
	$(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
	ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
	$(MKDIR) $(INSTALL_DATADIR)
	$(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif
fpc_sourceinstall: distclean
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) $(BASEDIR) $(INSTALL_SOURCEDIR)
fpc_exampleinstall: $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef EXAMPLESOURCEFILES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
	$(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
ifndef EXAMPLESOURCEFILES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
	$(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif
fpc_distinstall: fpc_install fpc_exampleinstall
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
ifdef PPUFILES
CLEANPPULINKFILES:=$(shell $(PPUFILES) $(CLEANPPUFILES))
else
CLEANPPULINKFILES:=$(wildcard $(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(LIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))))
endif
override CLEANPPULINKFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) $(PPAS) link.res $(FPCEXTFILE) $(REDIRFILE)
fpc_distclean: fpc_clean
ifdef COMPILER_UNITTARGETDIR
TARGETDIRCLEAN=fpc_clean
endif
fpc_cleanall: $(CLEANTARGET) $(TARGETDIRCLEAN)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) $(FPCMADE) $(PPAS) link.res $(FPCEXTFILE) $(REDIRFILE)
.PHONY: fpc_info
fpc_info:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  Pwd....... $(PWD)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  PPUFiles.. $(PPUFILES)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  Upx....... $(UPXPROG)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders...... $(TARGET_LOADERS)
	@$(ECHO)  Target Units........ $(TARGET_UNITS)
	@$(ECHO)  Target Programs..... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs......... $(TARGET_DIRS)
	@$(ECHO)  Target Examples..... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.. $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)
	@$(ECHO)  INSTALL_BASEDIR...... $(INSTALL_BASEDIR)
	@$(ECHO)  INSTALL_BINDIR....... $(INSTALL_BINDIR)
	@$(ECHO)  INSTALL_LIBDIR....... $(INSTALL_LIBDIR)
	@$(ECHO)  INSTALL_UNITDIR...... $(INSTALL_UNITDIR)
	@$(ECHO)  INSTALL_SOURCEDIR.... $(INSTALL_SOURCEDIR)
	@$(ECHO)  INSTALL_DOCDIR....... $(INSTALL_DOCDIR)
	@$(ECHO)  INSTALL_DATADIR...... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  DIST_DESTDIR......... $(DIST_DESTDIR)
	@$(ECHO)  DIST_ZIPNAME......... $(DIST_ZIPNAME)
	@$(ECHO)
ifeq ($(OS_TARGET),linux)
TARGET_DIRS_ZLIB=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_X11=1
TARGET_DIRS_GTK=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_INET=1
TARGET_DIRS_UNCGI=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_ORACLE=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_CMEM=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_UNZIP=1
endif
ifeq ($(OS_TARGET),go32v2)
TARGET_DIRS_UNCGI=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_UNZIP=1
TARGET_DIRS_REGEXPR=1
endif
ifeq ($(OS_TARGET),win32)
TARGET_DIRS_UNCGI=1
TARGET_DIRS_GTK=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_ZLIB=1
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_UNZIP=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_OPENGL=1
endif
ifeq ($(OS_TARGET),os2)
TARGET_DIRS_UNCGI=1
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_UNZIP=1
TARGET_DIRS_REGEXPR=1
endif
ifeq ($(OS_TARGET),freebsd)
TARGET_DIRS_ZLIB=1
TARGET_DIRS_NCURSES=1
TARGET_DIRS_X11=1
TARGET_DIRS_GTK=1
TARGET_DIRS_SYSLOG=1
TARGET_DIRS_INET=1
TARGET_DIRS_UNCGI=1
TARGET_DIRS_MYSQL=1
TARGET_DIRS_IBASE=1
TARGET_DIRS_POSTGRES=1
TARGET_DIRS_OPENGL=1
TARGET_DIRS_FORMS=1
TARGET_DIRS_SVGALIB=1
TARGET_DIRS_GGI=1
TARGET_DIRS_UTMP=1
TARGET_DIRS_PASZLIB=1
TARGET_DIRS_GDBINT=1
TARGET_DIRS_CMEM=1
TARGET_DIRS_REGEXPR=1
TARGET_DIRS_UNZIP=1
endif
ifdef TARGET_DIRS_ZLIB
zlib_all:
	$(MAKE) -C zlib all
zlib_debug:
	$(MAKE) -C zlib debug
zlib_examples:
	$(MAKE) -C zlib examples
zlib_smart:
	$(MAKE) -C zlib smart
zlib_shared:
	$(MAKE) -C zlib shared
zlib_install:
	$(MAKE) -C zlib install
zlib_sourceinstall:
	$(MAKE) -C zlib sourceinstall
zlib_exampleinstall:
	$(MAKE) -C zlib exampleinstall
zlib_distinstall:
	$(MAKE) -C zlib distinstall
zlib_zipinstall:
	$(MAKE) -C zlib zipinstall
zlib_zipsourceinstall:
	$(MAKE) -C zlib zipsourceinstall
zlib_zipexampleinstall:
	$(MAKE) -C zlib zipexampleinstall
zlib_zipdistinstall:
	$(MAKE) -C zlib zipdistinstall
zlib_clean:
	$(MAKE) -C zlib clean
zlib_distclean:
	$(MAKE) -C zlib distclean
zlib_cleanall:
	$(MAKE) -C zlib cleanall
zlib_info:
	$(MAKE) -C zlib info
zlib:
	$(MAKE) -C zlib all
.PHONY: zlib_all zlib_debug zlib_examples zlib_smart zlib_shared zlib_install zlib_sourceinstall zlib_exampleinstall zlib_distinstall zlib_zipinstall zlib_zipsourceinstall zlib_zipexampleinstall zlib_zipdistinstall zlib_clean zlib_distclean zlib_cleanall zlib_info zlib
endif
ifdef TARGET_DIRS_NCURSES
ncurses_all:
	$(MAKE) -C ncurses all
ncurses_debug:
	$(MAKE) -C ncurses debug
ncurses_examples:
	$(MAKE) -C ncurses examples
ncurses_smart:
	$(MAKE) -C ncurses smart
ncurses_shared:
	$(MAKE) -C ncurses shared
ncurses_install:
	$(MAKE) -C ncurses install
ncurses_sourceinstall:
	$(MAKE) -C ncurses sourceinstall
ncurses_exampleinstall:
	$(MAKE) -C ncurses exampleinstall
ncurses_distinstall:
	$(MAKE) -C ncurses distinstall
ncurses_zipinstall:
	$(MAKE) -C ncurses zipinstall
ncurses_zipsourceinstall:
	$(MAKE) -C ncurses zipsourceinstall
ncurses_zipexampleinstall:
	$(MAKE) -C ncurses zipexampleinstall
ncurses_zipdistinstall:
	$(MAKE) -C ncurses zipdistinstall
ncurses_clean:
	$(MAKE) -C ncurses clean
ncurses_distclean:
	$(MAKE) -C ncurses distclean
ncurses_cleanall:
	$(MAKE) -C ncurses cleanall
ncurses_info:
	$(MAKE) -C ncurses info
ncurses:
	$(MAKE) -C ncurses all
.PHONY: ncurses_all ncurses_debug ncurses_examples ncurses_smart ncurses_shared ncurses_install ncurses_sourceinstall ncurses_exampleinstall ncurses_distinstall ncurses_zipinstall ncurses_zipsourceinstall ncurses_zipexampleinstall ncurses_zipdistinstall ncurses_clean ncurses_distclean ncurses_cleanall ncurses_info ncurses
endif
ifdef TARGET_DIRS_X11
x11_all:
	$(MAKE) -C x11 all
x11_debug:
	$(MAKE) -C x11 debug
x11_examples:
	$(MAKE) -C x11 examples
x11_smart:
	$(MAKE) -C x11 smart
x11_shared:
	$(MAKE) -C x11 shared
x11_install:
	$(MAKE) -C x11 install
x11_sourceinstall:
	$(MAKE) -C x11 sourceinstall
x11_exampleinstall:
	$(MAKE) -C x11 exampleinstall
x11_distinstall:
	$(MAKE) -C x11 distinstall
x11_zipinstall:
	$(MAKE) -C x11 zipinstall
x11_zipsourceinstall:
	$(MAKE) -C x11 zipsourceinstall
x11_zipexampleinstall:
	$(MAKE) -C x11 zipexampleinstall
x11_zipdistinstall:
	$(MAKE) -C x11 zipdistinstall
x11_clean:
	$(MAKE) -C x11 clean
x11_distclean:
	$(MAKE) -C x11 distclean
x11_cleanall:
	$(MAKE) -C x11 cleanall
x11_info:
	$(MAKE) -C x11 info
x11:
	$(MAKE) -C x11 all
.PHONY: x11_all x11_debug x11_examples x11_smart x11_shared x11_install x11_sourceinstall x11_exampleinstall x11_distinstall x11_zipinstall x11_zipsourceinstall x11_zipexampleinstall x11_zipdistinstall x11_clean x11_distclean x11_cleanall x11_info x11
endif
ifdef TARGET_DIRS_GTK
gtk_all:
	$(MAKE) -C gtk all
gtk_debug:
	$(MAKE) -C gtk debug
gtk_examples:
	$(MAKE) -C gtk examples
gtk_smart:
	$(MAKE) -C gtk smart
gtk_shared:
	$(MAKE) -C gtk shared
gtk_install:
	$(MAKE) -C gtk install
gtk_sourceinstall:
	$(MAKE) -C gtk sourceinstall
gtk_exampleinstall:
	$(MAKE) -C gtk exampleinstall
gtk_distinstall:
	$(MAKE) -C gtk distinstall
gtk_zipinstall:
	$(MAKE) -C gtk zipinstall
gtk_zipsourceinstall:
	$(MAKE) -C gtk zipsourceinstall
gtk_zipexampleinstall:
	$(MAKE) -C gtk zipexampleinstall
gtk_zipdistinstall:
	$(MAKE) -C gtk zipdistinstall
gtk_clean:
	$(MAKE) -C gtk clean
gtk_distclean:
	$(MAKE) -C gtk distclean
gtk_cleanall:
	$(MAKE) -C gtk cleanall
gtk_info:
	$(MAKE) -C gtk info
gtk:
	$(MAKE) -C gtk all
.PHONY: gtk_all gtk_debug gtk_examples gtk_smart gtk_shared gtk_install gtk_sourceinstall gtk_exampleinstall gtk_distinstall gtk_zipinstall gtk_zipsourceinstall gtk_zipexampleinstall gtk_zipdistinstall gtk_clean gtk_distclean gtk_cleanall gtk_info gtk
endif
ifdef TARGET_DIRS_SYSLOG
syslog_all:
	$(MAKE) -C syslog all
syslog_debug:
	$(MAKE) -C syslog debug
syslog_examples:
	$(MAKE) -C syslog examples
syslog_smart:
	$(MAKE) -C syslog smart
syslog_shared:
	$(MAKE) -C syslog shared
syslog_install:
	$(MAKE) -C syslog install
syslog_sourceinstall:
	$(MAKE) -C syslog sourceinstall
syslog_exampleinstall:
	$(MAKE) -C syslog exampleinstall
syslog_distinstall:
	$(MAKE) -C syslog distinstall
syslog_zipinstall:
	$(MAKE) -C syslog zipinstall
syslog_zipsourceinstall:
	$(MAKE) -C syslog zipsourceinstall
syslog_zipexampleinstall:
	$(MAKE) -C syslog zipexampleinstall
syslog_zipdistinstall:
	$(MAKE) -C syslog zipdistinstall
syslog_clean:
	$(MAKE) -C syslog clean
syslog_distclean:
	$(MAKE) -C syslog distclean
syslog_cleanall:
	$(MAKE) -C syslog cleanall
syslog_info:
	$(MAKE) -C syslog info
syslog:
	$(MAKE) -C syslog all
.PHONY: syslog_all syslog_debug syslog_examples syslog_smart syslog_shared syslog_install syslog_sourceinstall syslog_exampleinstall syslog_distinstall syslog_zipinstall syslog_zipsourceinstall syslog_zipexampleinstall syslog_zipdistinstall syslog_clean syslog_distclean syslog_cleanall syslog_info syslog
endif
ifdef TARGET_DIRS_INET
inet_all:
	$(MAKE) -C inet all
inet_debug:
	$(MAKE) -C inet debug
inet_examples:
	$(MAKE) -C inet examples
inet_smart:
	$(MAKE) -C inet smart
inet_shared:
	$(MAKE) -C inet shared
inet_install:
	$(MAKE) -C inet install
inet_sourceinstall:
	$(MAKE) -C inet sourceinstall
inet_exampleinstall:
	$(MAKE) -C inet exampleinstall
inet_distinstall:
	$(MAKE) -C inet distinstall
inet_zipinstall:
	$(MAKE) -C inet zipinstall
inet_zipsourceinstall:
	$(MAKE) -C inet zipsourceinstall
inet_zipexampleinstall:
	$(MAKE) -C inet zipexampleinstall
inet_zipdistinstall:
	$(MAKE) -C inet zipdistinstall
inet_clean:
	$(MAKE) -C inet clean
inet_distclean:
	$(MAKE) -C inet distclean
inet_cleanall:
	$(MAKE) -C inet cleanall
inet_info:
	$(MAKE) -C inet info
inet:
	$(MAKE) -C inet all
.PHONY: inet_all inet_debug inet_examples inet_smart inet_shared inet_install inet_sourceinstall inet_exampleinstall inet_distinstall inet_zipinstall inet_zipsourceinstall inet_zipexampleinstall inet_zipdistinstall inet_clean inet_distclean inet_cleanall inet_info inet
endif
ifdef TARGET_DIRS_UNCGI
uncgi_all:
	$(MAKE) -C uncgi all
uncgi_debug:
	$(MAKE) -C uncgi debug
uncgi_examples:
	$(MAKE) -C uncgi examples
uncgi_smart:
	$(MAKE) -C uncgi smart
uncgi_shared:
	$(MAKE) -C uncgi shared
uncgi_install:
	$(MAKE) -C uncgi install
uncgi_sourceinstall:
	$(MAKE) -C uncgi sourceinstall
uncgi_exampleinstall:
	$(MAKE) -C uncgi exampleinstall
uncgi_distinstall:
	$(MAKE) -C uncgi distinstall
uncgi_zipinstall:
	$(MAKE) -C uncgi zipinstall
uncgi_zipsourceinstall:
	$(MAKE) -C uncgi zipsourceinstall
uncgi_zipexampleinstall:
	$(MAKE) -C uncgi zipexampleinstall
uncgi_zipdistinstall:
	$(MAKE) -C uncgi zipdistinstall
uncgi_clean:
	$(MAKE) -C uncgi clean
uncgi_distclean:
	$(MAKE) -C uncgi distclean
uncgi_cleanall:
	$(MAKE) -C uncgi cleanall
uncgi_info:
	$(MAKE) -C uncgi info
uncgi:
	$(MAKE) -C uncgi all
.PHONY: uncgi_all uncgi_debug uncgi_examples uncgi_smart uncgi_shared uncgi_install uncgi_sourceinstall uncgi_exampleinstall uncgi_distinstall uncgi_zipinstall uncgi_zipsourceinstall uncgi_zipexampleinstall uncgi_zipdistinstall uncgi_clean uncgi_distclean uncgi_cleanall uncgi_info uncgi
endif
ifdef TARGET_DIRS_MYSQL
mysql_all:
	$(MAKE) -C mysql all
mysql_debug:
	$(MAKE) -C mysql debug
mysql_examples:
	$(MAKE) -C mysql examples
mysql_smart:
	$(MAKE) -C mysql smart
mysql_shared:
	$(MAKE) -C mysql shared
mysql_install:
	$(MAKE) -C mysql install
mysql_sourceinstall:
	$(MAKE) -C mysql sourceinstall
mysql_exampleinstall:
	$(MAKE) -C mysql exampleinstall
mysql_distinstall:
	$(MAKE) -C mysql distinstall
mysql_zipinstall:
	$(MAKE) -C mysql zipinstall
mysql_zipsourceinstall:
	$(MAKE) -C mysql zipsourceinstall
mysql_zipexampleinstall:
	$(MAKE) -C mysql zipexampleinstall
mysql_zipdistinstall:
	$(MAKE) -C mysql zipdistinstall
mysql_clean:
	$(MAKE) -C mysql clean
mysql_distclean:
	$(MAKE) -C mysql distclean
mysql_cleanall:
	$(MAKE) -C mysql cleanall
mysql_info:
	$(MAKE) -C mysql info
mysql:
	$(MAKE) -C mysql all
.PHONY: mysql_all mysql_debug mysql_examples mysql_smart mysql_shared mysql_install mysql_sourceinstall mysql_exampleinstall mysql_distinstall mysql_zipinstall mysql_zipsourceinstall mysql_zipexampleinstall mysql_zipdistinstall mysql_clean mysql_distclean mysql_cleanall mysql_info mysql
endif
ifdef TARGET_DIRS_IBASE
ibase_all:
	$(MAKE) -C ibase all
ibase_debug:
	$(MAKE) -C ibase debug
ibase_examples:
	$(MAKE) -C ibase examples
ibase_smart:
	$(MAKE) -C ibase smart
ibase_shared:
	$(MAKE) -C ibase shared
ibase_install:
	$(MAKE) -C ibase install
ibase_sourceinstall:
	$(MAKE) -C ibase sourceinstall
ibase_exampleinstall:
	$(MAKE) -C ibase exampleinstall
ibase_distinstall:
	$(MAKE) -C ibase distinstall
ibase_zipinstall:
	$(MAKE) -C ibase zipinstall
ibase_zipsourceinstall:
	$(MAKE) -C ibase zipsourceinstall
ibase_zipexampleinstall:
	$(MAKE) -C ibase zipexampleinstall
ibase_zipdistinstall:
	$(MAKE) -C ibase zipdistinstall
ibase_clean:
	$(MAKE) -C ibase clean
ibase_distclean:
	$(MAKE) -C ibase distclean
ibase_cleanall:
	$(MAKE) -C ibase cleanall
ibase_info:
	$(MAKE) -C ibase info
ibase:
	$(MAKE) -C ibase all
.PHONY: ibase_all ibase_debug ibase_examples ibase_smart ibase_shared ibase_install ibase_sourceinstall ibase_exampleinstall ibase_distinstall ibase_zipinstall ibase_zipsourceinstall ibase_zipexampleinstall ibase_zipdistinstall ibase_clean ibase_distclean ibase_cleanall ibase_info ibase
endif
ifdef TARGET_DIRS_POSTGRES
postgres_all:
	$(MAKE) -C postgres all
postgres_debug:
	$(MAKE) -C postgres debug
postgres_examples:
	$(MAKE) -C postgres examples
postgres_smart:
	$(MAKE) -C postgres smart
postgres_shared:
	$(MAKE) -C postgres shared
postgres_install:
	$(MAKE) -C postgres install
postgres_sourceinstall:
	$(MAKE) -C postgres sourceinstall
postgres_exampleinstall:
	$(MAKE) -C postgres exampleinstall
postgres_distinstall:
	$(MAKE) -C postgres distinstall
postgres_zipinstall:
	$(MAKE) -C postgres zipinstall
postgres_zipsourceinstall:
	$(MAKE) -C postgres zipsourceinstall
postgres_zipexampleinstall:
	$(MAKE) -C postgres zipexampleinstall
postgres_zipdistinstall:
	$(MAKE) -C postgres zipdistinstall
postgres_clean:
	$(MAKE) -C postgres clean
postgres_distclean:
	$(MAKE) -C postgres distclean
postgres_cleanall:
	$(MAKE) -C postgres cleanall
postgres_info:
	$(MAKE) -C postgres info
postgres:
	$(MAKE) -C postgres all
.PHONY: postgres_all postgres_debug postgres_examples postgres_smart postgres_shared postgres_install postgres_sourceinstall postgres_exampleinstall postgres_distinstall postgres_zipinstall postgres_zipsourceinstall postgres_zipexampleinstall postgres_zipdistinstall postgres_clean postgres_distclean postgres_cleanall postgres_info postgres
endif
ifdef TARGET_DIRS_ORACLE
oracle_all:
	$(MAKE) -C oracle all
oracle_debug:
	$(MAKE) -C oracle debug
oracle_examples:
	$(MAKE) -C oracle examples
oracle_smart:
	$(MAKE) -C oracle smart
oracle_shared:
	$(MAKE) -C oracle shared
oracle_install:
	$(MAKE) -C oracle install
oracle_sourceinstall:
	$(MAKE) -C oracle sourceinstall
oracle_exampleinstall:
	$(MAKE) -C oracle exampleinstall
oracle_distinstall:
	$(MAKE) -C oracle distinstall
oracle_zipinstall:
	$(MAKE) -C oracle zipinstall
oracle_zipsourceinstall:
	$(MAKE) -C oracle zipsourceinstall
oracle_zipexampleinstall:
	$(MAKE) -C oracle zipexampleinstall
oracle_zipdistinstall:
	$(MAKE) -C oracle zipdistinstall
oracle_clean:
	$(MAKE) -C oracle clean
oracle_distclean:
	$(MAKE) -C oracle distclean
oracle_cleanall:
	$(MAKE) -C oracle cleanall
oracle_info:
	$(MAKE) -C oracle info
oracle:
	$(MAKE) -C oracle all
.PHONY: oracle_all oracle_debug oracle_examples oracle_smart oracle_shared oracle_install oracle_sourceinstall oracle_exampleinstall oracle_distinstall oracle_zipinstall oracle_zipsourceinstall oracle_zipexampleinstall oracle_zipdistinstall oracle_clean oracle_distclean oracle_cleanall oracle_info oracle
endif
ifdef TARGET_DIRS_OPENGL
opengl_all:
	$(MAKE) -C opengl all
opengl_debug:
	$(MAKE) -C opengl debug
opengl_examples:
	$(MAKE) -C opengl examples
opengl_smart:
	$(MAKE) -C opengl smart
opengl_shared:
	$(MAKE) -C opengl shared
opengl_install:
	$(MAKE) -C opengl install
opengl_sourceinstall:
	$(MAKE) -C opengl sourceinstall
opengl_exampleinstall:
	$(MAKE) -C opengl exampleinstall
opengl_distinstall:
	$(MAKE) -C opengl distinstall
opengl_zipinstall:
	$(MAKE) -C opengl zipinstall
opengl_zipsourceinstall:
	$(MAKE) -C opengl zipsourceinstall
opengl_zipexampleinstall:
	$(MAKE) -C opengl zipexampleinstall
opengl_zipdistinstall:
	$(MAKE) -C opengl zipdistinstall
opengl_clean:
	$(MAKE) -C opengl clean
opengl_distclean:
	$(MAKE) -C opengl distclean
opengl_cleanall:
	$(MAKE) -C opengl cleanall
opengl_info:
	$(MAKE) -C opengl info
opengl:
	$(MAKE) -C opengl all
.PHONY: opengl_all opengl_debug opengl_examples opengl_smart opengl_shared opengl_install opengl_sourceinstall opengl_exampleinstall opengl_distinstall opengl_zipinstall opengl_zipsourceinstall opengl_zipexampleinstall opengl_zipdistinstall opengl_clean opengl_distclean opengl_cleanall opengl_info opengl
endif
ifdef TARGET_DIRS_FORMS
forms_all:
	$(MAKE) -C forms all
forms_debug:
	$(MAKE) -C forms debug
forms_examples:
	$(MAKE) -C forms examples
forms_smart:
	$(MAKE) -C forms smart
forms_shared:
	$(MAKE) -C forms shared
forms_install:
	$(MAKE) -C forms install
forms_sourceinstall:
	$(MAKE) -C forms sourceinstall
forms_exampleinstall:
	$(MAKE) -C forms exampleinstall
forms_distinstall:
	$(MAKE) -C forms distinstall
forms_zipinstall:
	$(MAKE) -C forms zipinstall
forms_zipsourceinstall:
	$(MAKE) -C forms zipsourceinstall
forms_zipexampleinstall:
	$(MAKE) -C forms zipexampleinstall
forms_zipdistinstall:
	$(MAKE) -C forms zipdistinstall
forms_clean:
	$(MAKE) -C forms clean
forms_distclean:
	$(MAKE) -C forms distclean
forms_cleanall:
	$(MAKE) -C forms cleanall
forms_info:
	$(MAKE) -C forms info
forms:
	$(MAKE) -C forms all
.PHONY: forms_all forms_debug forms_examples forms_smart forms_shared forms_install forms_sourceinstall forms_exampleinstall forms_distinstall forms_zipinstall forms_zipsourceinstall forms_zipexampleinstall forms_zipdistinstall forms_clean forms_distclean forms_cleanall forms_info forms
endif
ifdef TARGET_DIRS_SVGALIB
svgalib_all:
	$(MAKE) -C svgalib all
svgalib_debug:
	$(MAKE) -C svgalib debug
svgalib_examples:
	$(MAKE) -C svgalib examples
svgalib_smart:
	$(MAKE) -C svgalib smart
svgalib_shared:
	$(MAKE) -C svgalib shared
svgalib_install:
	$(MAKE) -C svgalib install
svgalib_sourceinstall:
	$(MAKE) -C svgalib sourceinstall
svgalib_exampleinstall:
	$(MAKE) -C svgalib exampleinstall
svgalib_distinstall:
	$(MAKE) -C svgalib distinstall
svgalib_zipinstall:
	$(MAKE) -C svgalib zipinstall
svgalib_zipsourceinstall:
	$(MAKE) -C svgalib zipsourceinstall
svgalib_zipexampleinstall:
	$(MAKE) -C svgalib zipexampleinstall
svgalib_zipdistinstall:
	$(MAKE) -C svgalib zipdistinstall
svgalib_clean:
	$(MAKE) -C svgalib clean
svgalib_distclean:
	$(MAKE) -C svgalib distclean
svgalib_cleanall:
	$(MAKE) -C svgalib cleanall
svgalib_info:
	$(MAKE) -C svgalib info
svgalib:
	$(MAKE) -C svgalib all
.PHONY: svgalib_all svgalib_debug svgalib_examples svgalib_smart svgalib_shared svgalib_install svgalib_sourceinstall svgalib_exampleinstall svgalib_distinstall svgalib_zipinstall svgalib_zipsourceinstall svgalib_zipexampleinstall svgalib_zipdistinstall svgalib_clean svgalib_distclean svgalib_cleanall svgalib_info svgalib
endif
ifdef TARGET_DIRS_GGI
ggi_all:
	$(MAKE) -C ggi all
ggi_debug:
	$(MAKE) -C ggi debug
ggi_examples:
	$(MAKE) -C ggi examples
ggi_smart:
	$(MAKE) -C ggi smart
ggi_shared:
	$(MAKE) -C ggi shared
ggi_install:
	$(MAKE) -C ggi install
ggi_sourceinstall:
	$(MAKE) -C ggi sourceinstall
ggi_exampleinstall:
	$(MAKE) -C ggi exampleinstall
ggi_distinstall:
	$(MAKE) -C ggi distinstall
ggi_zipinstall:
	$(MAKE) -C ggi zipinstall
ggi_zipsourceinstall:
	$(MAKE) -C ggi zipsourceinstall
ggi_zipexampleinstall:
	$(MAKE) -C ggi zipexampleinstall
ggi_zipdistinstall:
	$(MAKE) -C ggi zipdistinstall
ggi_clean:
	$(MAKE) -C ggi clean
ggi_distclean:
	$(MAKE) -C ggi distclean
ggi_cleanall:
	$(MAKE) -C ggi cleanall
ggi_info:
	$(MAKE) -C ggi info
ggi:
	$(MAKE) -C ggi all
.PHONY: ggi_all ggi_debug ggi_examples ggi_smart ggi_shared ggi_install ggi_sourceinstall ggi_exampleinstall ggi_distinstall ggi_zipinstall ggi_zipsourceinstall ggi_zipexampleinstall ggi_zipdistinstall ggi_clean ggi_distclean ggi_cleanall ggi_info ggi
endif
ifdef TARGET_DIRS_UTMP
utmp_all:
	$(MAKE) -C utmp all
utmp_debug:
	$(MAKE) -C utmp debug
utmp_examples:
	$(MAKE) -C utmp examples
utmp_smart:
	$(MAKE) -C utmp smart
utmp_shared:
	$(MAKE) -C utmp shared
utmp_install:
	$(MAKE) -C utmp install
utmp_sourceinstall:
	$(MAKE) -C utmp sourceinstall
utmp_exampleinstall:
	$(MAKE) -C utmp exampleinstall
utmp_distinstall:
	$(MAKE) -C utmp distinstall
utmp_zipinstall:
	$(MAKE) -C utmp zipinstall
utmp_zipsourceinstall:
	$(MAKE) -C utmp zipsourceinstall
utmp_zipexampleinstall:
	$(MAKE) -C utmp zipexampleinstall
utmp_zipdistinstall:
	$(MAKE) -C utmp zipdistinstall
utmp_clean:
	$(MAKE) -C utmp clean
utmp_distclean:
	$(MAKE) -C utmp distclean
utmp_cleanall:
	$(MAKE) -C utmp cleanall
utmp_info:
	$(MAKE) -C utmp info
utmp:
	$(MAKE) -C utmp all
.PHONY: utmp_all utmp_debug utmp_examples utmp_smart utmp_shared utmp_install utmp_sourceinstall utmp_exampleinstall utmp_distinstall utmp_zipinstall utmp_zipsourceinstall utmp_zipexampleinstall utmp_zipdistinstall utmp_clean utmp_distclean utmp_cleanall utmp_info utmp
endif
ifdef TARGET_DIRS_PASZLIB
paszlib_all:
	$(MAKE) -C paszlib all
paszlib_debug:
	$(MAKE) -C paszlib debug
paszlib_examples:
	$(MAKE) -C paszlib examples
paszlib_smart:
	$(MAKE) -C paszlib smart
paszlib_shared:
	$(MAKE) -C paszlib shared
paszlib_install:
	$(MAKE) -C paszlib install
paszlib_sourceinstall:
	$(MAKE) -C paszlib sourceinstall
paszlib_exampleinstall:
	$(MAKE) -C paszlib exampleinstall
paszlib_distinstall:
	$(MAKE) -C paszlib distinstall
paszlib_zipinstall:
	$(MAKE) -C paszlib zipinstall
paszlib_zipsourceinstall:
	$(MAKE) -C paszlib zipsourceinstall
paszlib_zipexampleinstall:
	$(MAKE) -C paszlib zipexampleinstall
paszlib_zipdistinstall:
	$(MAKE) -C paszlib zipdistinstall
paszlib_clean:
	$(MAKE) -C paszlib clean
paszlib_distclean:
	$(MAKE) -C paszlib distclean
paszlib_cleanall:
	$(MAKE) -C paszlib cleanall
paszlib_info:
	$(MAKE) -C paszlib info
paszlib:
	$(MAKE) -C paszlib all
.PHONY: paszlib_all paszlib_debug paszlib_examples paszlib_smart paszlib_shared paszlib_install paszlib_sourceinstall paszlib_exampleinstall paszlib_distinstall paszlib_zipinstall paszlib_zipsourceinstall paszlib_zipexampleinstall paszlib_zipdistinstall paszlib_clean paszlib_distclean paszlib_cleanall paszlib_info paszlib
endif
ifdef TARGET_DIRS_GDBINT
gdbint_all:
	$(MAKE) -C gdbint all
gdbint_debug:
	$(MAKE) -C gdbint debug
gdbint_examples:
	$(MAKE) -C gdbint examples
gdbint_smart:
	$(MAKE) -C gdbint smart
gdbint_shared:
	$(MAKE) -C gdbint shared
gdbint_install:
	$(MAKE) -C gdbint install
gdbint_sourceinstall:
	$(MAKE) -C gdbint sourceinstall
gdbint_exampleinstall:
	$(MAKE) -C gdbint exampleinstall
gdbint_distinstall:
	$(MAKE) -C gdbint distinstall
gdbint_zipinstall:
	$(MAKE) -C gdbint zipinstall
gdbint_zipsourceinstall:
	$(MAKE) -C gdbint zipsourceinstall
gdbint_zipexampleinstall:
	$(MAKE) -C gdbint zipexampleinstall
gdbint_zipdistinstall:
	$(MAKE) -C gdbint zipdistinstall
gdbint_clean:
	$(MAKE) -C gdbint clean
gdbint_distclean:
	$(MAKE) -C gdbint distclean
gdbint_cleanall:
	$(MAKE) -C gdbint cleanall
gdbint_info:
	$(MAKE) -C gdbint info
gdbint:
	$(MAKE) -C gdbint all
.PHONY: gdbint_all gdbint_debug gdbint_examples gdbint_smart gdbint_shared gdbint_install gdbint_sourceinstall gdbint_exampleinstall gdbint_distinstall gdbint_zipinstall gdbint_zipsourceinstall gdbint_zipexampleinstall gdbint_zipdistinstall gdbint_clean gdbint_distclean gdbint_cleanall gdbint_info gdbint
endif
ifdef TARGET_DIRS_CMEM
cmem_all:
	$(MAKE) -C cmem all
cmem_debug:
	$(MAKE) -C cmem debug
cmem_examples:
	$(MAKE) -C cmem examples
cmem_smart:
	$(MAKE) -C cmem smart
cmem_shared:
	$(MAKE) -C cmem shared
cmem_install:
	$(MAKE) -C cmem install
cmem_sourceinstall:
	$(MAKE) -C cmem sourceinstall
cmem_exampleinstall:
	$(MAKE) -C cmem exampleinstall
cmem_distinstall:
	$(MAKE) -C cmem distinstall
cmem_zipinstall:
	$(MAKE) -C cmem zipinstall
cmem_zipsourceinstall:
	$(MAKE) -C cmem zipsourceinstall
cmem_zipexampleinstall:
	$(MAKE) -C cmem zipexampleinstall
cmem_zipdistinstall:
	$(MAKE) -C cmem zipdistinstall
cmem_clean:
	$(MAKE) -C cmem clean
cmem_distclean:
	$(MAKE) -C cmem distclean
cmem_cleanall:
	$(MAKE) -C cmem cleanall
cmem_info:
	$(MAKE) -C cmem info
cmem:
	$(MAKE) -C cmem all
.PHONY: cmem_all cmem_debug cmem_examples cmem_smart cmem_shared cmem_install cmem_sourceinstall cmem_exampleinstall cmem_distinstall cmem_zipinstall cmem_zipsourceinstall cmem_zipexampleinstall cmem_zipdistinstall cmem_clean cmem_distclean cmem_cleanall cmem_info cmem
endif
ifdef TARGET_DIRS_REGEXPR
regexpr_all:
	$(MAKE) -C regexpr all
regexpr_debug:
	$(MAKE) -C regexpr debug
regexpr_examples:
	$(MAKE) -C regexpr examples
regexpr_smart:
	$(MAKE) -C regexpr smart
regexpr_shared:
	$(MAKE) -C regexpr shared
regexpr_install:
	$(MAKE) -C regexpr install
regexpr_sourceinstall:
	$(MAKE) -C regexpr sourceinstall
regexpr_exampleinstall:
	$(MAKE) -C regexpr exampleinstall
regexpr_distinstall:
	$(MAKE) -C regexpr distinstall
regexpr_zipinstall:
	$(MAKE) -C regexpr zipinstall
regexpr_zipsourceinstall:
	$(MAKE) -C regexpr zipsourceinstall
regexpr_zipexampleinstall:
	$(MAKE) -C regexpr zipexampleinstall
regexpr_zipdistinstall:
	$(MAKE) -C regexpr zipdistinstall
regexpr_clean:
	$(MAKE) -C regexpr clean
regexpr_distclean:
	$(MAKE) -C regexpr distclean
regexpr_cleanall:
	$(MAKE) -C regexpr cleanall
regexpr_info:
	$(MAKE) -C regexpr info
regexpr:
	$(MAKE) -C regexpr all
.PHONY: regexpr_all regexpr_debug regexpr_examples regexpr_smart regexpr_shared regexpr_install regexpr_sourceinstall regexpr_exampleinstall regexpr_distinstall regexpr_zipinstall regexpr_zipsourceinstall regexpr_zipexampleinstall regexpr_zipdistinstall regexpr_clean regexpr_distclean regexpr_cleanall regexpr_info regexpr
endif
ifdef TARGET_DIRS_UNZIP
unzip_all:
	$(MAKE) -C unzip all
unzip_debug:
	$(MAKE) -C unzip debug
unzip_examples:
	$(MAKE) -C unzip examples
unzip_smart:
	$(MAKE) -C unzip smart
unzip_shared:
	$(MAKE) -C unzip shared
unzip_install:
	$(MAKE) -C unzip install
unzip_sourceinstall:
	$(MAKE) -C unzip sourceinstall
unzip_exampleinstall:
	$(MAKE) -C unzip exampleinstall
unzip_distinstall:
	$(MAKE) -C unzip distinstall
unzip_zipinstall:
	$(MAKE) -C unzip zipinstall
unzip_zipsourceinstall:
	$(MAKE) -C unzip zipsourceinstall
unzip_zipexampleinstall:
	$(MAKE) -C unzip zipexampleinstall
unzip_zipdistinstall:
	$(MAKE) -C unzip zipdistinstall
unzip_clean:
	$(MAKE) -C unzip clean
unzip_distclean:
	$(MAKE) -C unzip distclean
unzip_cleanall:
	$(MAKE) -C unzip cleanall
unzip_info:
	$(MAKE) -C unzip info
unzip:
	$(MAKE) -C unzip all
.PHONY: unzip_all unzip_debug unzip_examples unzip_smart unzip_shared unzip_install unzip_sourceinstall unzip_exampleinstall unzip_distinstall unzip_zipinstall unzip_zipsourceinstall unzip_zipexampleinstall unzip_zipdistinstall unzip_clean unzip_distclean unzip_cleanall unzip_info unzip
endif
all: fpc_all $(addsuffix _all,$(TARGET_DIRS))
debug: fpc_debug $(addsuffix _debug,$(TARGET_DIRS))
examples: fpc_examples $(addsuffix _examples,$(TARGET_DIRS))
smart: fpc_smart $(addsuffix _smart,$(TARGET_DIRS))
shared: fpc_shared $(addsuffix _shared,$(TARGET_DIRS))
install: fpc_install $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: fpc_sourceinstall $(addsuffix _sourceinstall,$(TARGET_DIRS))
exampleinstall: fpc_exampleinstall $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: fpc_distinstall $(addsuffix _distinstall,$(TARGET_DIRS))
zipinstall: $(addsuffix _zipinstall,$(TARGET_DIRS))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(TARGET_DIRS))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: $(addsuffix _zipdistinstall,$(TARGET_DIRS))
clean: fpc_clean $(addsuffix _clean,$(TARGET_DIRS))
distclean: fpc_distclean $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: fpc_cleanall $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info $(addsuffix _info,$(TARGET_DIRS))
.PHONY: all debug examples smart shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
