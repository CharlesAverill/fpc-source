;
; Templates used by fpcmake to create a Makefile from Makefile.fpc
;

[osdetect]
#####################################################################
# Autodetect OS (Linux or Dos or Windows NT or OS/2)
# define inUnix when running under Unix like environment
#               (Linux,FreeBSD,Cygwin)
# define inWinNT when running under WinNT
# define inOS2 when running under OS/2
# define inCygwin when running under Cygwin32
#####################################################################

# We need only / in the path
override PATH:=$(subst \,/,$(PATH))

# Determine if we've a unix searchpath using : by looking for a ;
# that normally doesn't exists in path names.
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH=$(subst :, ,$(PATH))
else
SEARCHPATH=$(subst ;, ,$(PATH))
endif

# Search for PWD and determine also if we are under linux
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
nopwd:
        @echo You need the GNU utils package to use this Makefile!
        @echo Get ftp://ftp.freepascal.org/pub/fpc/dist/go32v2/utilgo32.zip
        @exit
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif

# Detect NT - NT sets OS to Windows_NT
# Detect OS/2 - OS/2 has OS2_SHELL defined
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygwin,$(MACH_TYPE)),)
inCygWin=1
endif
endif

# The extension of batch files / scripts
ifdef inUnix
BATCHEXT=.sh
else
ifdef inOS2
BATCHEXT=.cmd
else
BATCHEXT=.bat
endif
endif

# Path Separator, the subst trick is necessary for the \ that can't exists
# at the end of a line
ifdef inUnix
PATHSEP=/
else
PATHSEP=$(subst /,\,/)
endif

# Base dir
ifdef PWD
BASEDIR:=$(shell $(PWD))
else
BASEDIR=.
endif

[fpcdetect]
#####################################################################
# FPC version/target Detection
#####################################################################

# What compiler to use ?
ifndef FPC
# Compatibility with old makefiles
ifdef PP
FPC=$(PP)
else
FPC=ppc386
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)

# Target OS
ifndef OS_TARGET
OS_TARGET:=$(shell $(FPC) -iTO)
endif

# Source OS
ifndef OS_SOURCE
OS_SOURCE:=$(shell $(FPC) -iSO)
endif

# Target CPU
ifndef CPU_TARGET
CPU_TARGET:=$(shell $(FPC) -iTP)
endif

# Source CPU
ifndef CPU_SOURCE
CPU_SOURCE:=$(shell $(FPC) -iSP)
endif

# FPC version
ifndef FPC_VERSION
FPC_VERSION:=$(shell $(FPC) -iV)
endif

export FPC OS_TARGET OS_SOURCE CPU_TARGET CPU_SOURCE FPC_VERSION


[fpcdircheckenv]
#####################################################################
# FPCDIR Setting
#####################################################################

# Test FPCDIR to look if the RTL dir exists
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif


[fpcdirdetect]
# Detect FPCDIR
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl units)),)
override FPCDIR=c:/pp
endif
endif
endif
endif

# Units dir
UNITSDIR=$(wildcard $(FPCDIR)/units/$(OS_TARGET))

# Packages dir
PACKAGESDIR=$(wildcard $(FPCDIR) $(FPCDIR)/packages)


[shelltools]
#####################################################################
# Shell tools
#####################################################################

# echo
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(EXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif

# To copy pograms
ifndef COPY
COPY:=cp -fp
endif

# Copy a whole tree
ifndef COPYTREE
COPYTREE:=cp -rfp
endif

# To move pograms
ifndef MOVE
MOVE:=mv -f
endif

# Check delete program
ifndef DEL
DEL:=rm -f
endif

# Check deltree program
ifndef DELTREE
DELTREE:=rm -rf
endif

# To install files
ifndef INSTALL
ifdef inUnix
INSTALL:=install -c -m 644
else
INSTALL:=$(COPY)
endif
endif

# To install programs
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=install -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif

# To make a directory.
ifndef MKDIR
ifdef inUnix
MKDIR:=install -m 755 -d
else
MKDIR:=ginstall -m 755 -d
endif
endif

export ECHO COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR


[defaulttools]
#####################################################################
# Default Tools
#####################################################################

# assembler, redefine it if cross compiling
ifndef AS
AS=as
endif

# linker, but probably not used
ifndef LD
LD=ld
endif

# Resource compiler
ifndef RC
RC=rc
endif

# ppas.bat / ppas.sh
PPAS=ppas$(BATCHEXT)

# ldconfig to rebuild .so cache
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif

# ppumove
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE=
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE

# ppufiles
ifndef PPUFILES
PPUFILES:=$(strip $(wildcard $(addsuffix /ppufiles$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUFILES),)
PPUFILES=
else
PPUFILES:=$(firstword $(PPUFILES))
endif
endif
export PPUFILES

# gdate/date
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEACHPATH))))
ifeq ($(DATE),)
DATE=
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE

ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif

# Look if UPX is found for go32v2 and win32. We can't use $UPX becuase
# upx uses that one itself (PFV)
ifndef UPXPROG
ifeq ($(OS_TARGET),go32v2)
UPXPROG:=1
endif
ifeq ($(OS_TARGET),win32)
UPXPROG:=1
endif
ifdef UPXPROG
UPXPROG:=$(strip $(wildcard $(addsuffix /upx$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(UPXPROG),)
UPXPROG=
else
UPXPROG:=$(firstword $(UPXPROG))
endif
else
UPXPROG=
endif
endif
export UPXPROG

# ZipProg, you can't use Zip as the var name (PFV)
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG=
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG

ZIPOPT=-9
ZIPEXT=.zip

# Tar
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG=
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG

ifeq ($(USETAR),bz2)
TAROPT=vI
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif


[extensions]
#####################################################################
# Default extensions
#####################################################################

# Default needed extensions (Go32v2,Linux)
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
LIBPREFIX=lib
RSTEXT=.rst
FPCMADE=fpcmade


# Go32v1
ifeq ($(OS_TARGET),go32v1)
PPUEXT=.pp1
OEXT=.o1
ASMEXT=.s1
SMARTEXT=.sl1
STATICLIBEXT=.a1
SHAREDLIBEXT=.so1
LIBPREFIX=
FPCMADE=fpcmade.v1
PACKAGESUFFIX=v1
endif

# Go32v2
ifeq ($(OS_TARGET),go32v2)
LIBPREFIX=
FPCMADE=fpcmade.dos
ZIPSUFFIX=go32
endif

# Linux
ifeq ($(OS_TARGET),linux)
EXEEXT=
HASSHAREDLIB=1
FPCMADE=fpcmade.lnx
ZIPSUFFIX=linux
endif

# Linux
ifeq ($(OS_TARGET),freebsd)
EXEEXT=
HASSHAREDLIB=1
FPCMADE=fpcmade.freebsd
ZIPSUFFIX=freebsd
endif

# Win32
ifeq ($(OS_TARGET),win32)
PPUEXT=.ppw
OEXT=.ow
ASMEXT=.sw
SMARTEXT=.slw
STATICLIBEXT=.aw
SHAREDLIBEXT=.dll
FPCMADE=fpcmade.w32
ZIPSUFFIX=w32
endif

# OS/2
ifeq ($(OS_TARGET),os2)
PPUEXT=.ppo
ASMEXT=.so2
OEXT=.oo2
AOUTEXT=.out
SMARTEXT=.so
STATICLIBEXT=.ao2
SHAREDLIBEXT=.dll
FPCMADE=fpcmade.os2
ZIPSUFFIX=emx
endif

[defaultdirs]
#####################################################################
# Default Directories
#####################################################################

# Units dir
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif

# Units dir
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif


# Linux and freebsd use unix dirs with /usr/bin, /usr/lib
# When zipping use the target as default, when normal install then
# use the source os as default
ifdef ZIPINSTALL
# Zipinstall
ifeq ($(OS_TARGET),linux)
UNIXINSTALLDIR=1
endif
ifeq ($(OS_TARGET),freebsd)
UNIXINSTALLDIR=1
endif
else
# Normal install
ifeq ($(OS_SOURCE),linux)
UNIXINSTALLDIR=1
endif
ifeq ($(OS_SOURCE),freebsd)
UNIXINSTALLDIR=1
endif
endif

# set the prefix directory where to install everything
ifndef INSTALL_PREFIX
ifdef UNIXINSTALLDIR
INSTALL_PREFIX=/usr/local
else
INSTALL_PREFIX=/pp
endif
endif
export INSTALL_PREFIX

# Where to place the resulting zip files
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR


#####################################################################
# Install Directories
#####################################################################

# set the base directory where to install everything
ifndef INSTALL_BASEDIR
ifdef UNIXINSTALLDIR
INSTALL_BASEDIR=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR=$(INSTALL_PREFIX)
endif
endif

# set the directory where to install the binaries
ifndef INSTALL_BINDIR
ifdef UNIXINSTALLDIR
INSTALL_BINDIR=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR=$(INSTALL_BASEDIR)/bin/$(OS_TARGET)
endif
endif

# set the directory where to install the units.
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR=$(INSTALL_BASEDIR)/units/$(OS_TARGET)
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif

# Where to install shared libraries
ifndef INSTALL_LIBDIR
ifdef UNIXINSTALLDIR
INSTALL_LIBDIR=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR=$(INSTALL_UNITDIR)
endif
endif

# Where the source files will be stored
ifndef INSTALL_SOURCEDIR
ifdef UNIXINSTALLDIR
INSTALL_SOURCEDIR=$(INSTALL_PREFIX)/src/fpc-$(FPC_VERSION)
else
INSTALL_SOURCEDIR=$(INSTALL_BASEDIR)/source
endif
ifdef PACKAGE_NAME
INSTALL_SOURCEDIR:=$(INSTALL_SOURCEDIR)/$(PACKAGE_NAME)
endif
endif

# Where the doc files will be stored
ifndef INSTALL_DOCDIR
ifdef UNIXINSTALLDIR
INSTALL_DOCDIR=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)
else
INSTALL_DOCDIR=$(INSTALL_BASEDIR)/doc
endif
endif

# Where to install the examples, under linux we use the doc dir
# because the copytree command will create a subdir itself
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXINSTALLDIR
INSTALL_EXAMPLEDIR=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR=$(INSTALL_BASEDIR)/examples
endif
ifdef EXAMPLESUBDIR
INSTALL_EXAMPLEDIR:=$(INSTALL_EXAMPLEDIR)/$(EXAMPLESUBDIR)
endif
endif

# Where the some extra (data)files will be stored
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif


[dirlibc]
# On linux, try to find where libgcc.a is.
ifdef inUnix
ifndef GCCLIBDIR
GCCLIBDIR:=$(shell dirname `(gcc -v 2>&1)| head -n 1| awk '{ print $$4 } '`)
endif
ifndef OTHERLIBDIR
OTHERLIBDIR:=$(shell grep -v "^\#" /etc/ld.so.conf | awk '{ ORS=" "; print $1 }')
endif
export GCCLIBDIR OTHERLIB
endif


[command_begin]
#####################################################################
# Compiler Command Line
#####################################################################

# Load commandline OPTDEF and add FPC_CPU define
override FPCOPTDEF=$(CPU_TARGET)

# Load commandline OPT and add target and unit dir to be sure
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif

# User dirs should be first, so they are looked at first
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif

# Smartlinking
ifdef LINKSMART
override FPCOPT+=-XX
endif

# Smartlinking creation
ifdef CREATESMART
override FPCOPT+=-CX
endif

# Debug
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif

# Release mode (strip, optimize and don't load ppc386.cfg)
ifdef RELEASE
override FPCOPT+=-Xs -OG2p3 -n
override FPCOPTDEF+=RELEASE
endif

# Strip
ifdef STRIP
override FPCOPT+=-Xs
endif

# Optimizer
ifdef OPTIMIZE
override FPCOPT+=-OG2p3
endif

# Verbose settings (warning,note,info)
ifdef VERBOSE
override FPCOPT+=-vwni
endif

# Needed compiler options
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif

# Target dirs and the prefix to use for clean/install
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif

# Unit target dir
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif

[command_libc]
# Add GCC lib path if asked
ifdef GCCLIBDIR
override FPCOPT+=-Fl$(GCCLIBDIR)
endif
ifdef OTHERLIBDIR
override FPCOPT+=$(addprefix -Fl,$(OTHERLIBDIR))
endif


[command_end]
# Add commandline options last so they can override
ifdef OPT
override FPCOPT+=$(OPT)
endif

# Add defines from FPCOPTDEF to FPCOPT
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif

# Was a config file specified ?
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif

# For win32 the options are passed using the environment FPCEXTCMD
ifeq ($(OS_SOURCE),win32)
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif

# Compiler commandline
override COMPILER:=$(FPC) $(FPCOPT)

# also call ppas if with command option -s
# but only if the OS_SOURCE and OS_TARGET are equal
ifeq (,$(findstring -s ,$(COMPILER)))
EXECPPAS=
else
ifeq ($(OS_SOURCE),$(OS_TARGET))
EXECPPAS:=@$(PPAS)
endif
endif


[loaderrules]
#####################################################################
# Loaders
#####################################################################

.PHONY: fpc_loaders

ifdef TARGET_LOADERS
override ALLTARGET+=fpc_loaders
override CLEANTARGET+=fpc_loaders_clean
override INSTALLTARGET+=fpc_loaders_install

override LOADEROFILES:=$(addsuffix $(OEXT),$(TARGET_LOADERS))
endif

%$(OEXT): %$(LOADEREXT)
        $(AS) -o $*$(OEXT) $<

fpc_loaders: $(LOADEROFILES)

fpc_loaders_clean:
        -$(DEL) $(LOADEROFILES)

fpc_loaders_install:
        $(MKDIR) $(INSTALL_UNITDIR)
        $(INSTALL) $(LOADEROFILES) $(INSTALL_UNITDIR)


[unitrules]
#####################################################################
# Units
#####################################################################

.PHONY: fpc_units

ifdef TARGET_UNITS
override ALLTARGET+=fpc_units

override UNITPPUFILES=$(addsuffix $(PPUEXT),$(TARGET_UNITS))
override INSTALLPPUFILES+=$(UNITPPUFILES)
override CLEANPPUFILES+=$(UNITPPUFILES)
endif

fpc_units: $(UNITPPUFILES)


[exerules]
#####################################################################
# Exes
#####################################################################

.PHONY: fpc_exes

ifdef TARGET_PROGRAMS
override EXEFILES=$(addsuffix $(EXEEXT),$(TARGET_PROGRAMS))
override EXEOFILES:=$(addsuffix $(OEXT),$(TARGET_PROGRAMS)) $(addprefix $(LIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_PROGRAMS)))

override ALLTARGET+=fpc_exes
override INSTALLEXEFILES+=$(EXEFILES)
override CLEANEXEFILES+=$(EXEFILES) $(EXEOFILES)
ifeq ($(OS_TARGET),os2)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_PROGRAMS))
endif
endif

fpc_exes: $(EXEFILES)


[rstrules]
#####################################################################
# Resource strings
#####################################################################

ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))

override CLEANRSTFILES+=$(RSTFILES)
endif


[examplerules]
#####################################################################
# Examples
#####################################################################

.PHONY: fpc_examples fpc_test

ifdef TARGET_EXAMPLES
override EXAMPLESOURCEFILES:=$(wildcard $(addsuffix .pp,$(TARGET_EXAMPLES)) $(addsuffix .pas,$(TARGET_EXAMPLES)))
override EXAMPLEFILES:=$(addsuffix $(EXEEXT),$(TARGET_EXAMPLES))
override EXAMPLEOFILES:=$(addsuffix $(OEXT),$(TARGET_EXAMPLES)) $(addprefix $(LIBPREFIX),$(addsuffix $(STATICLIBEXT),$(TARGET_EXAMPLES)))

override CLEANEXEFILES+=$(EXAMPLEFILES) $(EXAMPLEOFILES)
ifeq ($(OS_TARGET),os2)
override CLEANEXEFILES+=$(addsuffix $(AOUTEXT),$(TARGET_EXAMPLES))
endif
endif

fpc_examples: all $(EXAMPLEFILES) $(addsuffix _all,$(TARGET_EXAMPLEDIRS))


[compilerules]
#####################################################################
# General compile rules
#####################################################################

.PHONY: fpc_packages fpc_all fpc_smart fpc_debug

$(FPCMADE): $(ALLTARGET)
        @$(ECHO) Compiled > $(FPCMADE)

fpc_packages: $(COMPILEPACKAGES)

fpc_all: fpc_packages $(FPCMADE)

fpc_smart:
        $(MAKE) all LINKSMART=1 CREATESMART=1

fpc_debug:
        $(MAKE) all DEBUG=1

# General compile rules, available for both possible .pp and .pas extensions

.SUFFIXES: $(EXEEXT) $(PPUEXT) $(OEXT) .pas .pp

%$(PPUEXT): %.pp
        $(COMPILER) $<
        $(EXECPPAS)

%$(PPUEXT): %.pas
        $(COMPILER) $<
        $(EXECPPAS)

%$(EXEEXT): %.pp
        $(COMPILER) $<
        $(EXECPPAS)

%$(EXEEXT): %.pas
        $(COMPILER) $<
        $(EXECPPAS)

# Search paths for .ppu and .pp and .pas
vpath %.pp $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %.pas $(COMPILER_SOURCEDIR) $(COMPILER_INCLUDEDIR)
vpath %$(PPUEXT) $(COMPILER_UNITTARGETDIR)


[libraryrules]
#####################################################################
# Library
#####################################################################

.PHONY: fpc_shared

ifndef LIB_FULLNAME
ifdef LIB_VERSION
LIB_FULLNAME=$(LIB_NAME).$(LIB_VERSION)
else
LIB_FULLNAME=$(LIB_NAME)
endif
endif

# Default sharedlib units are all unit objects
ifndef LIB_SHAREDUNITS
LIB_SHAREDUNITS:=$(TARGET_UNITS)
endif

fpc_shared: all
ifdef HASSHAREDLIB
        $(PPUMOVE) $(LIB_SHAREDUNITS) -o$(LIB_FULLNAME)
else
        @$(ECHO) Shared Libraries not supported
endif


[installrules]
#####################################################################
# Install rules
#####################################################################

.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall

ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif

ifdef INSTALLPPUFILES
ifdef PPUFILES
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(INSTALLPPUFILES))
override INSTALLPPULINKFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(shell $(PPUFILES) -S -O $(INSTALLPPUFILES)))
else
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(LIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(INSTALLPPUFILES))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(INSTALLPPULINKFILES)))
endif
endif

ifdef INSTALLEXEFILES
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(INSTALLEXEFILES))
endif


fpc_install: $(INSTALLTARGET)
# Create UnitInstallFiles
ifdef INSTALLEXEFILES
        $(MKDIR) $(INSTALL_BINDIR)
# Compress the exes if upx is defined
ifdef UPXPROG
        -$(UPXPROG) $(INSTALLEXEFILES)
endif
        $(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALLPPUFILES
        $(MKDIR) $(INSTALL_UNITDIR)
        $(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
        $(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
        $(MKDIR) $(INSTALL_LIBDIR)
        $(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
        ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
        $(MKDIR) $(INSTALL_DATADIR)
        $(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif

fpc_sourceinstall: distclean
        $(MKDIR) $(INSTALL_SOURCEDIR)
        $(COPYTREE) $(BASEDIR) $(INSTALL_SOURCEDIR)

fpc_exampleinstall: $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef EXAMPLESOURCEFILES
        $(MKDIR) $(INSTALL_EXAMPLEDIR)
        $(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
ifndef EXAMPLESOURCEFILES
        $(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
        $(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif

fpc_distinstall: fpc_install fpc_exampleinstall


[zipinstallrules]
#####################################################################
# Zip
#####################################################################

.PHONY: fpc_zipinstall fpc_zipsourceinstall fpc_zipexampleinstall

# Temporary path to pack a file
ifndef PACKDIR
ifndef inUnix
PACKDIR=$(BASEDIR)/../pack_tmp/$(PACKAGE_NAME)
else
PACKDIR=/tmp/fpc-pack/$(PACKAGE_NAME)
endif
endif

# Maybe create default zipname from packagename
ifndef ZIPNAME
ifdef DIST_ZIPNAME
ZIPNAME=$(DIST_ZIPNAME)
else
ZIPNAME=$(ZIPPREFIX)$(PACKAGE_NAME)$(ZIPSUFFIX)
endif
endif

# ZipTarget
ifndef ZIPTARGET
ifdef DIST_ZIPTARGET
ZIPTARGET=DIST_ZIPTARGET
else
ZIPTARGET=install
endif
endif

# Use tar by default under linux
ifndef USEZIP
ifdef inUnix
USETAR=1
endif
endif

# Use a wrapper script by default for Os/2
ifdef inOS2
USEZIPWRAPPER=1
endif

# Create commands to create the zip/tar file
ZIPWRAPPER=$(DIST_DESTDIR)/fpczip$(BATCHEXT)
ZIPCMD_CDPACK:=cd $(subst /,$(PATHSEP),$(PACKDIR))
ZIPCMD_CDBASE:=cd $(subst /,$(PATHSEP),$(BASEDIR))
ifdef USETAR
ZIPDESTFILE:=$(DIST_DESTDIR)/$(ZIPNAME)$(TAREXT)
ZIPCMD_ZIP:=$(TARPROG) cf$(TAROPT) $(ZIPDESTFILE) *
else
ZIPDESTFILE:=$(DIST_DESTDIR)/$(ZIPNAME)$(ZIPEXT)
ZIPCMD_ZIP:=$(subst /,$(PATHSEP),$(ZIPPROG)) -Dr $(ZIPOPT) $(ZIPDESTFILE) *
endif

fpc_zipinstall:
        $(MAKE) $(ZIPTARGET) INSTALL_PREFIX=$(PACKDIR) ZIPINSTALL=1
        $(DEL) $(ZIPDESTFILE)
ifdef USEZIPWRAPPER
ifneq ($(ECHO),echo)
        $(ECHO) "$(ZIPCMD_CDPACK)" > $(ZIPWRAPPER)
        $(ECHO) "$(ZIPCMD_ZIP)" >> $(ZIPWRAPPER)
        $(ECHO) "$(ZIPCMD_CDBASE)" >> $(ZIPWRAPPER)
else
        $(ECHO) $(ZIPCMD_CDPACK) > $(ZIPWRAPPER)
        $(ECHO) $(ZIPCMD_ZIP) >> $(ZIPWRAPPER)
        $(ECHO) $(ZIPCMD_CDBASE) >> $(ZIPWRAPPER)
endif
ifdef inUnix
        /bin/sh $(ZIPWRAPPER)
else
        $(ZIPWRAPPER)
endif
        $(DEL) $(ZIPWRAPPER)
else
        $(ZIPCMD_CDPACK) ; $(ZIPCMD_ZIP) ; $(ZIPCMD_CDBASE)
endif
        $(DELTREE) $(PACKDIR)

fpc_zipsourceinstall:
        $(MAKE) fpc_zipinstall ZIPTARGET=sourceinstall ZIPSUFFIX=src

fpc_zipexampleinstall:
        $(MAKE) fpc_zipinstall ZIPTARGET=exampleinstall ZIPSUFFIX=exm

fpc_zipdistinstall:
        $(MAKE) fpc_zipinstall ZIPTARGET=distinstall


[cleanrules]
#####################################################################
# Clean rules
#####################################################################

.PHONY: fpc_clean fpc_cleanall fpc_distclean

ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
endif

ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif

ifdef CLEANPPUFILES
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
# Get the .o and .a files created for the units
ifdef PPUFILES
CLEANPPULINKFILES:=$(shell $(PPUFILES) $(CLEANPPUFILES))
else
CLEANPPULINKFILES:=$(wildcard $(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(LIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))))
endif
override CLEANPPULINKFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES))
endif

fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
        -$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANPPUFILES
        -$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
        -$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
        -$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
        -$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
        -$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
        -$(DEL) $(FPCMADE) $(PPAS) link.res $(FPCEXTFILE) $(REDIRFILE)

fpc_distclean: fpc_clean

# Also run clean first if targetdir is set. Unittargetdir is always
# set if targetdir or unittargetdir is specified
ifdef COMPILER_UNITTARGETDIR
TARGETDIRCLEAN=fpc_clean
endif

fpc_cleanall: $(CLEANTARGET) $(TARGETDIRCLEAN)
ifdef CLEANEXEFILES
        -$(DEL) $(CLEANEXEFILES)
endif
        -$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
        -$(DELTREE) *$(SMARTEXT)
        -$(DEL) $(FPCMADE) $(PPAS) link.res $(FPCEXTFILE) $(REDIRFILE)
ifdef AOUTEXT
        -$(DEL) *$(AOUTEXT)
endif


[inforules]
#####################################################################
# Info rules
#####################################################################

.PHONY: fpc_info

fpc_info:
        @$(ECHO)
        @$(ECHO)  == Package info ==
        @$(ECHO)  Package Name..... $(PACKAGE_NAME)
        @$(ECHO)  Package Version.. $(PACKAGE_VERSION)
        @$(ECHO)
        @$(ECHO)  == Configuration info ==
        @$(ECHO)
        @$(ECHO)  FPC.......... $(FPC)
        @$(ECHO)  FPC Version.. $(FPC_VERSION)
        @$(ECHO)  Source CPU... $(CPU_SOURCE)
        @$(ECHO)  Target CPU... $(CPU_TARGET)
        @$(ECHO)  Source OS.... $(OS_SOURCE)
        @$(ECHO)  Target OS.... $(OS_TARGET)
        @$(ECHO)
        @$(ECHO)  == Directory info ==
        @$(ECHO)
        @$(ECHO)  Basedir......... $(BASEDIR)
        @$(ECHO)  FPCDir.......... $(FPCDIR)
        @$(ECHO)  UnitsDir........ $(UNITSDIR)
        @$(ECHO)  PackagesDir..... $(PACKAGESDIR)
        @$(ECHO)
        @$(ECHO)  GCC library..... $(GCCLIBDIR)
        @$(ECHO)  Other library... $(OTHERLIBDIR)
        @$(ECHO)
        @$(ECHO)  == Tools info ==
        @$(ECHO)
        @$(ECHO)  Pwd....... $(PWD)
        @$(ECHO)  Echo...... $(ECHO)
        @$(ECHO)  PPUMove... $(PPUMOVE)
        @$(ECHO)  PPUFiles.. $(PPUFILES)
        @$(ECHO)  Date...... $(DATE)
        @$(ECHO)  Upx....... $(UPXPROG)
        @$(ECHO)  Zip....... $(ZIPPROG)
        @$(ECHO)
        @$(ECHO)  == Object info ==
        @$(ECHO)
        @$(ECHO)  Target Loaders...... $(TARGET_LOADERS)
        @$(ECHO)  Target Units........ $(TARGET_UNITS)
        @$(ECHO)  Target Programs..... $(TARGET_PROGRAMS)
        @$(ECHO)  Target Dirs......... $(TARGET_DIRS)
        @$(ECHO)  Target Examples..... $(TARGET_EXAMPLES)
        @$(ECHO)  Target ExampleDirs.. $(TARGET_EXAMPLEDIRS)
        @$(ECHO)
        @$(ECHO)  Clean Units......... $(CLEAN_UNITS)
        @$(ECHO)  Clean Files......... $(CLEAN_FILES)
        @$(ECHO)
        @$(ECHO)  Install Units....... $(INSTALL_UNITS)
        @$(ECHO)  Install Files....... $(INSTALL_FILES)
        @$(ECHO)
        @$(ECHO)  == Install info ==
        @$(ECHO)
        @$(ECHO)  DateStr.............. $(DATESTR)
        @$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
        @$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
        @$(ECHO)
        @$(ECHO)  INSTALL_BASEDIR...... $(INSTALL_BASEDIR)
        @$(ECHO)  INSTALL_BINDIR....... $(INSTALL_BINDIR)
        @$(ECHO)  INSTALL_LIBDIR....... $(INSTALL_LIBDIR)
        @$(ECHO)  INSTALL_UNITDIR...... $(INSTALL_UNITDIR)
        @$(ECHO)  INSTALL_SOURCEDIR.... $(INSTALL_SOURCEDIR)
        @$(ECHO)  INSTALL_DOCDIR....... $(INSTALL_DOCDIR)
        @$(ECHO)  INSTALL_DATADIR...... $(INSTALL_DATADIR)
        @$(ECHO)
        @$(ECHO)  DIST_DESTDIR......... $(DIST_DESTDIR)
        @$(ECHO)  DIST_ZIPNAME......... $(DIST_ZIPNAME)
        @$(ECHO)

[localmakefile]
#####################################################################
# Local Makefile
#####################################################################

ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif

[userrules]
#####################################################################
# Users rules
#####################################################################
